<?xml version="1.0"?>
<doc>
    <assembly>
        <name>R2API.ContentManagement</name>
    </assembly>
    <members>
        <member name="M:R2API.ContentManagement.CatalogBlockers.GetAvailability``1">
            <summary>
            Returns if the Catalog that manages the type T has finished initializing or not.
            </summary>
            <typeparam name="T">The type that the catalog manages</typeparam>
            <returns>True or False depending on wether the catalog has initialized or not. False if the dictionary doesnt contain T as a Key</returns>
        </member>
        <member name="T:R2API.ContentManagement.ManagedSerializableContentPack">
            <summary>
            Represents a SerializableContentPack that's managed by R2API in some way, shape or form
            </summary>
        </member>
        <member name="F:R2API.ContentManagement.ManagedSerializableContentPack.serializableContentPack">
            <summary>
            The SerializableContentPack
            </summary>
        </member>
        <member name="P:R2API.ContentManagement.ManagedSerializableContentPack.AutoCreateIContentPackProvider">
            <summary>
            Wether or not R2API will create an R2APIGenericContentPack for the finalized ContentPack.
            </summary>
        </member>
        <member name="T:R2API.ContentManagement.ManagedReadOnlyContentPack">
            <summary>
            Represents a ContentPack that's managed by R2API in some way, shape or form
            </summary>
        </member>
        <member name="P:R2API.ContentManagement.ManagedReadOnlyContentPack.ContentPack">
            <summary>
            The ReadOnlyContentPack
            </summary>
        </member>
        <member name="P:R2API.ContentManagement.ManagedReadOnlyContentPack.Identifier">
            <summary>
            The Identifier of the ReadOnlyContentPack
            </summary>
        </member>
        <member name="P:R2API.ContentManagement.ManagedReadOnlyContentPack.HasAutoCreatedIContentPackProvider">
            <summary>
            Wether or not R2API created an R2APIGenericContentPack for this ContentPack
            </summary>
        </member>
        <member name="T:R2API.ContentManagement.R2APIContentManager">
            <summary>
            A class that's used for managing ContentPacks created by R2API
            </summary>
        </member>
        <member name="P:R2API.ContentManagement.R2APIContentManager.Loaded">
            <summary>
            Return true if the submodule is loaded.
            </summary>
        </member>
        <member name="P:R2API.ContentManagement.R2APIContentManager.ManagedContentPacks">
            <summary>
            Returns a read only collection of all the ContentPacks created by R2API
            </summary>
        </member>
        <member name="F:R2API.ContentManagement.R2APIContentManager.OnContentPacksCreated">
            <summary>
            When R2API finishes creating the ContentPacks that it manages, this Action is ran.
            </summary>
        </member>
        <member name="M:R2API.ContentManagement.R2APIContentManager.AddPreExistingSerializableContentPack(R2API.ScriptableObjects.R2APISerializableContentPack,System.Boolean)">
            <summary>
            Adds a Pre-Existing R2APISerializableContentPack as your mod's content pack.
            <para>Example usage would be a Thunderkit mod adding their items via ItemAPI to get the advantage of using ItemAPI's IDRS Systems</para>
            </summary>
            <param name="contentPack">The R2APISerializableContentPack that will be tied to your mod.</param>
            <param name="createIContentPackProvider">If this is set to true, R2API will create a ContentPackProvider for your ContentPack and handle the loading for you.</param>
        </member>
        <member name="M:R2API.ContentManagement.R2APIContentManager.ReserveSerializableContentPack">
            <summary>
            Reserves a SerializableContentPack for your mod and returns it
            <para>If the SerializableContentPack already exists, it returns it.</para>
            </summary>
            <returns>The reserved SerializableContentPack</returns>
        </member>
        <member name="F:R2API.ContentManagement.R2APIContentManager.PluginVersion">
            <summary>
            Version of the plugin, should be matching with the thunderstore package.
            </summary>
        </member>
        <member name="T:R2API.ContentAddition">
            <summary>
            Class for adding Content Assets to your Mod's ContentPack.
            </summary>
        </member>
        <member name="M:R2API.ContentAddition.AddBody(UnityEngine.GameObject)">
            <summary>
            Adds a BodyPrefab to your Mod's ContentPack
            <para>BodyPrefab requires a CharacterBody component.</para>
            </summary>
            <param name="bodyPrefab">The BodyPrefab to add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddMaster(UnityEngine.GameObject)">
            <summary>
            Adds a MasterPrefab to your Mod's ContentPack
            <para>MasterPrefab requires a CharacterMaster component.</para>
            </summary>
            <param name="masterPrefab">The MasterPrefab to add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddProjectile(UnityEngine.GameObject)">
            <summary>
            Adds a ProjectilePrefab to your Mod's ContentPack
            <para>ProjectilePrefab requires a ProjectileController component.</para>
            <para>Throws a warning if it has no assigned ghost prefab.</para>
            </summary>
            <param name="projectilePrefab">The ProjectilePrefab to add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddGameMode(UnityEngine.GameObject)">
            <summary>
            Adds a GameModePrefab to your Mod's ContentPack
            <para>GameModePrefab requires a Run component.</para>
            </summary>
            <param name="gameModePrefab">The GameModePrefab to add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddNetworkedObject(UnityEngine.GameObject)">
            <summary>
            Adds a NetworkedObject prefab to your Mod's ContentPack
            <para>NetworkedObject requires a NetworkIdentity component.</para>
            <para>NetworkedObject isnt in PrefabAPI's Objects to Network.</para>
            </summary>
            <param name="networkedObject">The NetworkedObjectPrefab to add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddEffect(UnityEngine.GameObject)">
            <summary>
            Adds an EffectPrefab to your Mod's ContentPack
            EffectPrefab requires an EffectComponent.
            <para>Throws a warning if it has no VFXAttributes component.</para>
            </summary>
            <param name="effectPrefab">The EffectPrefab to add.</param>
            <returns>true if valid and added, false if one of the requirements is not met.</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddSkillDef(RoR2.Skills.SkillDef)">
            <summary>
            Adds a SkillDef to your Mod's ContentPack
            <para>SkillDef Requires a valid activationState</para>
            <para>SkillDef's activationStateMachine cannot be Null, Empty or Whitespace</para>
            </summary>
            <param name="skillDef">the SkillDef to Add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddSkillFamily(RoR2.Skills.SkillFamily)">
            <summary>
            Adds a SkillFamily to your Mod's ContentPack
            <para>SkillFamily's Variant's SkillDef cannot be null</para>
            </summary>
            <param name="skillFamily">The SkillFamily to Add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddSceneDef(RoR2.SceneDef)">
            <summary>
            Adds a SceneDef to your Mod's ContentPack
            <para>If you want he scene to be weaved with vanilla stages, use RainOfStages</para>
            </summary>
            <param name="sceneDef">The SceneDef to Add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddItemDef(RoR2.ItemDef)">
            <summary>
            Adds an ItemDef to your Mod's ContentPack
            <para>ItemDefs should be added by ItemAPI's Add methods.</para>
            </summary>
            <param name="itemDef">The ItemDef to Add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddItemTierDef(RoR2.ItemTierDef)">
            <summary>
            Adds an ItemTierDef to your Mod's ContentPack
            </summary>
            <param name="itemTierDef">The ItemTierDef to add</param>
            <returns>True if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddItemRelationshipProvider(RoR2.ItemRelationshipProvider)">
            <summary>
            Adds an ItemRelationshipProvider to your Mod's ContentPack
            </summary>
            <param name="itemRelationshipProvider">The ItemRelationshipProvider to add</param>
            <returns>True if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddItemRelationshipType(RoR2.ItemRelationshipType)">
            <summary>
            Adds an ItemRelationshipType to your Mod's ContentPack
            </summary>
            <param name="itemRelationshipType">The ItemRelationshipType to add</param>
            <returns>True if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddEquipmentDef(RoR2.EquipmentDef)">
            <summary>
            Adds an EquipmentDef to your Mod's ContentPack
            <para>EquipmentDef should be added by ItemAPI's Add methods.</para>
            </summary>
            <param name="equipmentDef">The EquipmentDef to Add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddBuffDef(RoR2.BuffDef)">
            <summary>
            Adds a BuffDef to your Mod's ContentPack
            <para>Throws a warning if the buffDef's EliteDef's EquipmentDef's passive buffDef is not the buffDef you pass through</para>
            <para>Throws a warning if the buffDef has a startSFX, but the startSFX's eventName is Null, Empty or White space.</para>
            </summary>
            <param name="buffDef">The BuffDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddEliteDef(RoR2.EliteDef)">
            <summary>
            Adds an EliteDef to your Mod's ContentPack
            <para>EliteDef should be added by EliteAPI's Add methods.</para>
            </summary>
            <param name="eliteDef">The EliteDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddUnlockableDef(RoR2.UnlockableDef)">
            <summary>
            Adds an UnlockableDef to your Mod's ContentPack
            <para>If you want the unlockable to be tied to an achievement, use UnlockableAPI instead.</para>
            </summary>
            <param name="unlockableDef">The UnlockableDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddSurvivorDef(RoR2.SurvivorDef)">
            <summary>
            Adds a SurvivorDef to your Mod's ContentPack
            <para>Requires the bodyPrefab to be assigned</para>
            <para>BodyPrefab requires a CharacterBody component</para>
            <para>Throws a warning if no displayPrefab is assigned</para>
            </summary>
            <param name="survivorDef">The SurvivorDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddArtifactDef(RoR2.ArtifactDef)">
            <summary>
            Adds an ArtifactDef to your Mod's ContentPack
            <para>Requires the ArtifactDef's icon sprites to not be null.</para>
            </summary>
            <param name="artifactDef">The ArtifactDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddSurfaceDef(RoR2.SurfaceDef)">
            <summary>
            Adds a SurfaceDef to your Mod's ContentPack
            <para>Requires the surfaceDef's impactEffect or footstepEffect prefabs to not be null</para>
            </summary>
            <param name="surfaceDef">The SurfaceDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddNetworkSoundEventDef(RoR2.NetworkSoundEventDef)">
            <summary>
            Adds a NetworkSoundEventDef to your Mod's ContentPack
            <para>Requires that the event's name is not null, empty or whitespace</para>
            </summary>
            <param name="networkSoundEventDef">The NetworkSoundEventDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddMusicTrackDef(RoR2.MusicTrackDef)">
            <summary>
            Adds a MusicTrackDef to your Mod's ContentPack
            <para>MusicTrackDefs should only be created in the editor due to WWise's unity integration. If you want to add new songs, use SoundAPI's MusicAPI</para>
            </summary>
            <param name="musicTrackDef">The MusicTrackDef to Add.</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddGameEndingDef(RoR2.GameEndingDef)">
            <summary>
            Adds a GameEndingDef to your Mod's ContentPack
            </summary>
            <param name="gameEndingDef">The GameEndingDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddEntityStateConfiguration(RoR2.EntityStateConfiguration)">
            <summary>
            Adds an EntityStateConfiguration to your Mod's ContentPack
            <para>ESC's Target Type must inherit from EntityState</para>
            <para>ESC's Target Type cannot be Abstract</para>
            </summary>
            <param name="entityStateConfiguration">The EntityStateConfiguration to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddExpansionDef(RoR2.ExpansionManagement.ExpansionDef)">
            <summary>
            Adds an ExpansionDef to your Mod's ContentPack
            </summary>
            <param name="expansionDef">The ExpansionDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddEntitlementDef(RoR2.EntitlementManagement.EntitlementDef)">
            <summary>
            Adds an EntitlementDef to your Mod's ContentPack
            </summary>
            <param name="entitlementDef">The EntitlementDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddMiscPickupDef(RoR2.MiscPickupDef)">
            <summary>
            Adds a MiscPickupDef to your Mod's ContentPack
            </summary>
            <param name="miscPickupDef">The MiscPickupDef to Add</param>
            <returns>true if valid and added, false if one of the requirements is not met</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddEntityState``1(System.Boolean@)">
            <summary>
            Adds an EntitySateType to your Mod's ContentPack
            <para>State Type cannot be abstract</para>
            </summary>
            <typeparam name="T">The State's Type</typeparam>
            <param name="wasAdded">Wether or not the state Type was succesfully added or not</param>
            <returns>A SerializableEntityStateType, the StateType will be null if "wasAdded" is false.</returns>
        </member>
        <member name="M:R2API.ContentAddition.AddEntityState(System.Type,System.Boolean@)">
            <summary>
            Adds an EntityStateType to your Mod's ContentPack
            <para>entityStateType cannot be abstract</para>
            </summary>
            <param name="entityStateType">The State's StateType</param>
            <param name="wasAdded">wether or not the state type was succesfully added or not</param>
            <returns>A SerializableEntityStateType, the StateType will be null if wasAdded is false.</returns>
        </member>
        <member name="M:R2API.ScriptableObjects.R2APISerializableContentPack.GetOrCreateContentPack">
            <summary>
            Creates the ContentPack tied to this SerializableContentPack, or returns one if its already been created.
            </summary>
            <returns>The ContentPack tied to this SerializableContentPack</returns>
        </member>
        <member name="T:R2API.AutoVersionGen.AutoVersionAttribute">
            <summary>
            Add a PluginVersion field to the attribut-ed class filled from the thunderstore.toml versionNumber field
            </summary>
        </member>
    </members>
</doc>
