<?xml version="1.0"?>
<doc>
    <assembly>
        <name>R2API.Director</name>
    </assembly>
    <members>
        <member name="T:R2API.AddressableDCCSPool">
            <summary>
            A <see cref="T:R2API.AddressableDCCSPool"/> is a version of a <see cref="T:RoR2.DccsPool"/> that can be created from the editor itself, it allows you to create complex DccsPools using R2API's <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset"/> system and your own existing spawn cards
            <br>You should also see <see cref="T:R2API.AddressableDirectorCardCategorySelection"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressableDCCSPool.PoolEntry">
            <summary>
            Represents a version of <see cref="T:RoR2.DccsPool.PoolEntry"/> that uses <see cref="T:R2API.AddressableDirectorCardCategorySelection"/> for representing a pool entry
            </summary>
        </member>
        <member name="T:R2API.AddressableDCCSPool.ConditionalPoolEntry">
            <summary>
            Represents a conditional version of a <see cref="T:R2API.AddressableDCCSPool.PoolEntry"/>
            <br>Contains a <see cref="F:R2API.AddressableDCCSPool.ConditionalPoolEntry.requiredExpansions"/> array that's populated using <see cref="T:R2API.AddressReferencedAssets.AddressReferencedExpansionDef"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressableDCCSPool.Category">
            <summary>
            Represents a category of DirectorCardCategorySelections for this pool
            </summary>
        </member>
        <member name="T:R2API.AddressableDirectorCard">
            <summary>
            Represents a <see cref="T:RoR2.DirectorCard"/> that can be created from using <see cref="!:"/>
            </summary>
        </member>
        <member name="T:R2API.AddressableDirectorCardCategorySelection">
            <summary>
            A <see cref="T:R2API.AddressableDirectorCardCategorySelection"/> is a version of a <see cref="T:RoR2.DirectorCardCategorySelection"/> that can be used for creating a custom and complex <see cref="T:RoR2.DirectorCardCategorySelection"/> for stages, using R2API's <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset"/> system and your own existing spawn cards
            <para>All the values from this category selection will be added to the <see cref="T:RoR2.DirectorCardCategorySelection"/> specified in <see cref="F:R2API.AddressableDirectorCardCategorySelection.targetCardCategorySelection"/></para>
            <br>You should also see <see cref="T:R2API.AddressableDCCSPool"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressableDirectorCardCategorySelection.Category">
            <summary>
            Represents a category of spawn cards
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI">
            <summary>
            API for modifying the monster and scene directors.
            </summary>
        </member>
        <member name="P:R2API.DirectorAPI.Loaded">
            <summary>
            Return true if the submodule is loaded.
            </summary>
        </member>
        <member name="E:R2API.DirectorAPI.StageSettingsActions">
            <summary>
            Event used to edit <see cref="T:R2API.DirectorAPI.StageSettings"/>.
            </summary>
        </member>
        <member name="E:R2API.DirectorAPI.MonsterActions">
             <summary>
             <para>
             Event used to edit the pool of monsters that can spawn in a given stage.
             </para>
            
             <para>
             First parameter is the <see cref="F:RoR2.ClassicStageInfo.monsterDccsPool"/>,
             depending if the stage was updated or not to use the new <see cref="T:RoR2.DccsPool"/>,
             some of the <see cref="T:RoR2.DccsPool.Category"/> and <see cref="T:RoR2.DccsPool.PoolEntry"/> can be here or not.
             </para>
            
             <para>
             For the Artifact of Dissonance <see cref="P:RoR2.RoR2Content.Artifacts.mixEnemyArtifactDef"/>,
             the original DCCS is located in <see cref="F:RoR2.RoR2Content.mixEnemyMonsterCards"/>
             which is represented by the second parameter of this event.
             </para>
            
             <para>
             A <see cref="F:RoR2.ClassicStageInfo.monsterDccsPool"/> usually contains, in a vanilla stage, the following :
             3 <see cref="F:RoR2.DccsPool.poolCategories"/>, written out in <see cref="T:R2API.DirectorAPI.Helpers.MonsterPoolCategories"/>.
             </para>
            
             <para>
             Below is an explanation of the <see cref="F:RoR2.ClassicStageInfo.monsterDccsPool"/> categories.
             </para>
            
             <para>
             The first category, <see cref="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.Standard"/> has, right now,
             a single <see cref="T:RoR2.DccsPool.ConditionalPoolEntry"/> (contained in <see cref="F:RoR2.DccsPool.Category.includedIfConditionsMet"/>)
             which contains the <see cref="T:RoR2.DirectorCardCategorySelection"/> used for DLC1 SOTV.
             Note : This <see cref="T:RoR2.DccsPool.ConditionalPoolEntry"/> is only here for stages that were setup for having DLC1 SOTV content.
             If the <see cref="F:RoR2.DccsPool.ConditionalPoolEntry.requiredExpansions"/> is not enabled in the current lobby,
             they are not added to the pool of choice.
             Right now, there is a single PoolEntry in <see cref="F:RoR2.DccsPool.Category.includedIfNoConditionsMet"/>,
             which is the vanilla (no expansion) dccs.
             </para>
            
             <para>
             The second category, <see cref="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.Family"/> has, right now,
             multiple <see cref="T:RoR2.DccsPool.ConditionalPoolEntry"/> (contained in <see cref="F:RoR2.DccsPool.Category.includedIfConditionsMet"/>)
             which contains the <see cref="T:RoR2.DirectorCardCategorySelection"/>s used for family events.
             They don't have a corresponding <see cref="F:RoR2.DccsPool.ConditionalPoolEntry.requiredExpansions"/>,
             so they are effectively always added to the pool of choice.
             </para>
            
             <para>
             The third category, <see cref="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.VoidInvasion"/> has, right now,
             a single <see cref="T:RoR2.DccsPool.ConditionalPoolEntry"/> (contained in <see cref="F:RoR2.DccsPool.Category.includedIfConditionsMet"/>)
             which contains the <see cref="T:RoR2.DirectorCardCategorySelection"/> used for void invasion events.
             It has a corresponding <see cref="F:RoR2.DccsPool.ConditionalPoolEntry.requiredExpansions"/>,
             so they are only added to the pool of choice if the DLC1 expansion is enabled.
             Note : This category is only here if the stage has DLC content, which is not guaranted.
             </para>
             </summary>
        </member>
        <member name="E:R2API.DirectorAPI.InteractableActions">
             <summary>
             <para>
             Event used to edit the pool of interactables that can spawn in a given stage.
             </para>
            
             <para>
             First parameter is the <see cref="F:RoR2.ClassicStageInfo.interactableDccsPool"/>,
             which is used to select a <see cref="T:RoR2.DirectorCardCategorySelection"/>.
             </para>
            
             <para>
             A <see cref="F:RoR2.ClassicStageInfo.interactableDccsPool"/> usually contains, in a vanilla stage, the following :
             1 <see cref="F:RoR2.DccsPool.poolCategories"/>, written out in <see cref="T:R2API.DirectorAPI.Helpers.InteractablePoolCategories"/>.
             </para>
            
             <para>
             The first category, <see cref="F:R2API.DirectorAPI.Helpers.InteractablePoolCategories.Standard"/> has, right now,
             a single <see cref="T:RoR2.DccsPool.ConditionalPoolEntry"/> (contained in <see cref="F:RoR2.DccsPool.Category.includedIfConditionsMet"/>)
             which contains the <see cref="T:RoR2.DirectorCardCategorySelection"/> used for DLC1 SOTV.
             Note : This <see cref="T:RoR2.DccsPool.ConditionalPoolEntry"/> is only here for stages that were setup for having DLC1 SOTV content.
             If the <see cref="F:RoR2.DccsPool.ConditionalPoolEntry.requiredExpansions"/> is not enabled in the current lobby,
             they are not added to the pool of choice.
             Right now, there is a single PoolEntry in <see cref="F:RoR2.DccsPool.Category.includedIfNoConditionsMet"/>,
             which is the vanilla (no expansion) dccs.
             </para>
             </summary>
        </member>
        <member name="T:R2API.DirectorAPI.MonsterCategory">
            <summary>
            The categories for monsters.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterCategory.Invalid">
            <summary>
            An invalid default value. Anything with this value is ignored when dealing with monsters.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterCategory.Custom">
            <summary>
            Anything with this value will instead be checked through <see cref="F:R2API.DirectorAPI.DirectorCardHolder.CustomMonsterCategory"/>
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterCategory.BasicMonsters">
            <summary>
            Small enemies like Lemurians and Beetles.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterCategory.Minibosses">
            <summary>
            Medium enemies like Golems and Beetle Guards.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterCategory.Champions">
            <summary>
            Bosses like Vagrants and Titans.
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.InteractableCategory">
            <summary>
            The categories for interactables.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Invalid">
            <summary>
            An invalid default value. Anything with this value is ignored when dealing with interactables.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Custom">
            <summary>
            Anything with this value will instead be checked through <see cref="F:R2API.DirectorAPI.DirectorCardHolder.CustomInteractableCategory"/>
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Chests">
            <summary>
            Chests, such as basic chests, large chests, shops, equipment barrels, lunar pods, and category chests. NOT legendary chests or cloaked chests.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Barrels">
            <summary>
            Barrels.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Shrines">
            <summary>
            Chance shrines, blood shrines, combat shrines, order shrines, mountain shrines, shrine of the woods. NOT shrine of gold.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Drones">
            <summary>
            All types of drones such as TC-280, equipment drones, gunner drones, healing drones, and incinerator drones. NOT gunner turrets.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Misc">
            <summary>
            Gunner turrets only.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Rare">
            <summary>
            Legendary chests, cloaked chests, shrine of gold, and radio scanners.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.InteractableCategory.Duplicator">
            <summary>
            All three tiers of printers.
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.Stage">
            <summary>
            A flags enum for the vanilla stages. Custom stages are handled with a string in StageInfo.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.Custom">
            <summary>
            When this is set to custom, check the string in StageInfo
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.TitanicPlains">
            <summary>
            External / Internal Name : Titanic Plains / golemplains
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.DistantRoost">
            <summary>
            External / Internal Name : Distant Roost / blackbeach
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.WetlandAspect">
            <summary>
            External / Internal Name : Wetland Aspect / foggyswamp
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.AbandonedAqueduct">
            <summary>
            External / Internal Name : Abandoned Aqueduct / goolake
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.RallypointDelta">
            <summary>
            External / Internal Name : Rallypoint Delta / frozenwall
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.ScorchedAcres">
            <summary>
            External / Internal Name : Scorched Acres / wispgraveyard
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.AbyssalDepths">
            <summary>
            External / Internal Name : Abyssal Depths / dampcavesimple
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.SirensCall">
            <summary>
            External / Internal Name : Siren's Call / shipgraveyard
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.GildedCoast">
            <summary>
            External / Internal Name : Hidden Realm: Gilded Coast / goldshores
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.MomentFractured">
            <summary>
            External / Internal Name : Hidden Realm: A Moment, Fractured / mysteryspace
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.Bazaar">
            <summary>
            External / Internal Name : Hidden Realm: Bazaar Between Time / bazaar
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.VoidCell">
            <summary>
            External / Internal Name : Void Fields / arena
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.MomentWhole">
            <summary>
            External / Internal Name : Hidden Realm: A Moment, Whole / limbo
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.SkyMeadow">
            <summary>
            External / Internal Name : Sky Meadow / skymeadow
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.ArtifactReliquary">
            <summary>
            External / Internal Name : Hidden Realm: Bulwark's Ambry / artifactworld
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.Commencement">
            <summary>
            External / Internal Name : Commencement / moon2
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.SunderedGrove">
            <summary>
            External / Internal Name : Sundered Grove / rootjungle
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.AphelianSanctuary">
            <summary>
            External / Internal Name : Aphelian Sanctuary / ancientloft
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.AphelianSanctuarySimulacrum">
            <summary>
            External / Internal Name : Aphelian Sanctuary - The Simulacrum / itancientloft
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.AbyssalDepthsSimulacrum">
            <summary>
            External / Internal Name : Abyssal Depths - The Simulacrum / itdampcave
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.RallypointDeltaSimulacrum">
            <summary>
            External / Internal Name : Rallypoint Delta - The Simulacrum / itfrozenwall
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.TitanicPlainsSimulacrum">
            <summary>
            External / Internal Name : Titanic Plains - The Simulacrum / itgolemplains
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.AbandonedAqueductSimulacrum">
            <summary>
            External / Internal Name : Abandoned Aqueduct - The Simulacrum / itgoolake
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.CommencementSimulacrum">
            <summary>
            External / Internal Name : Commencement - The Simulacrum / itmoon
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.SkyMeadowSimulacrum">
            <summary>
            External / Internal Name : Sky Meadow - The Simulacrum / itskymeadow
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.SiphonedForest">
            <summary>
            External / Internal Name : Siphoned Forest / snowyforest
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.SulfurPools">
            <summary>
            External / Internal Name : Sulfur Pools / sulfurpools
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.VoidLocus">
            <summary>
            External / Internal Name : Void Locus / voidraid
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Stage.ThePlanetarium">
            <summary>
            External / Internal Name : The Planetarium / voidstage
            </summary>
        </member>
        <member name="M:R2API.DirectorAPI.ParseInternalStageName(System.String)">
            <summary>
            Returns the <see cref="T:R2API.DirectorAPI.Stage"/> based on the internal name (<see cref="P:RoR2.SceneDef.baseSceneName"/>) of the stage.
            Returns <see cref="F:R2API.DirectorAPI.Stage.Custom"/> if the name is not vanilla.
            </summary>
            <param name="internalStageName"></param>
            <returns></returns>
        </member>
        <member name="M:R2API.DirectorAPI.GetStageEnumFromSceneDef(RoR2.SceneDef)">
            <summary>
            Returns the <see cref="T:R2API.DirectorAPI.Stage"/> based on the <see cref="P:RoR2.SceneDef.baseSceneName"/>.
            Returns <see cref="F:R2API.DirectorAPI.Stage.Custom"/> if the <see cref="T:RoR2.SceneDef"/> is not vanilla.
            </summary>
            <param name="sceneDef"></param>
            <returns></returns>
        </member>
        <member name="M:R2API.DirectorAPI.ToInternalStageName(R2API.DirectorAPI.Stage)">
            <summary>
            Returns the internal name (<see cref="P:RoR2.SceneDef.baseSceneName"/>) of the stage based on the <see cref="T:R2API.DirectorAPI.Stage"/>.
            Returns the empty string if the stage is not vanilla.
            </summary>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="P:R2API.DirectorAPI.VanillaStageToSceneDefs">
            <summary>
            Maps vanilla <see cref="T:R2API.DirectorAPI.Stage"/> to its <see cref="T:RoR2.SceneDef"/>.
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.StageInfo">
            <summary>
            Struct for holding information about the stage.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.StageInfo.stage">
            <summary>
            The current stage. If set to custom, check <see cref="F:R2API.DirectorAPI.StageInfo.CustomStageName"/>.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.StageInfo.CustomStageName">
            <summary>
            This is set to the name of the custom stage. Is left blank for vanilla stages.
            </summary>
        </member>
        <member name="M:R2API.DirectorAPI.StageInfo.ParseInternalStageName(System.String)">
            <summary>
            Returns the <see cref="T:R2API.DirectorAPI.StageInfo"/> based on the internal name (<see cref="P:RoR2.SceneDef.baseSceneName"/>) of the stage.
            </summary>
        </member>
        <member name="M:R2API.DirectorAPI.StageInfo.ToInternalStageName">
            <summary>
            The internal name (<see cref="P:RoR2.SceneDef.baseSceneName"/>) of the current stage.
            </summary>
        </member>
        <member name="M:R2API.DirectorAPI.StageInfo.CheckStage(R2API.DirectorAPI.Stage,System.String[])">
            <summary>
            Returns true if the current stage matches any of the stages you specify.
            To match a custom stage, include <see cref="F:R2API.DirectorAPI.Stage.Custom"/> in your stage input and specify names in <see cref="F:R2API.DirectorAPI.StageInfo.CustomStageName"/>.
            </summary>
            <param name="stage">The stages to match with</param>
            <param name="customStageNames">Names of the custom stages to match. Leave blank to match all custom stages</param>
            <returns></returns>
        </member>
        <member name="T:R2API.DirectorAPI.StageSettings">
            <summary>
            A class passed to everything subscribed to <see cref="E:R2API.DirectorAPI.StageSettingsActions"/> that contains various settings for a stage.
            All mods will be working off the same settings, so operators like *=, +=, -=, and /= are preferred over directly setting values.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.StageSettings.SceneDirectorMonsterCredits">
            <summary>
            How many credits the scene director has for monsters at the start of a stage.
            This scales with difficulty, and thus will always be zero on the first stage.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.StageSettings.SceneDirectorInteractableCredits">
            <summary>
            How many credits the scene director has for interactables at the start of a stage.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.StageSettings.BonusCreditObjects">
            <summary>
            If the GameObject key of the dictionary is enabled, then the scene director gains the value in extra interactable credits.
            Used for things like the door in Abyssal Depths.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.StageSettings.MonsterCategoryWeightsPerDccs">
            <summary>
            The weights for each monster category per possible DCCS on this stage.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.StageSettings.InteractableCategoryWeightsPerDccs">
            <summary>
            The weights for each interactable category per possible DCCS on this stage.
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.DirectorCardHolder">
            <summary>
            A wrapper class for DirectorCards.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.DirectorCardHolder.Card">
            <summary>
            The director card. This contains the majority of the information for an interactable or monster, including the prefab.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.DirectorCardHolder.MonsterCategory">
            <summary>
            The monster category the card belongs to. Will be set to <see cref="F:R2API.DirectorAPI.MonsterCategory.Invalid"/> for interactables,
            <see cref="F:R2API.DirectorAPI.MonsterCategory.Custom"/> for custom monster non-vanilla categories.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.DirectorCardHolder.CustomMonsterCategory">
            <summary>
            Should be null for vanilla categories
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.DirectorCardHolder.MonsterCategorySelectionWeight">
            <summary>
            This is only used in case the category didnt exist in the first place in the targeted DCCS.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.DirectorCardHolder.InteractableCategory">
            <summary>
            The interactable category the card belongs to. Will be set to <see cref="F:R2API.DirectorAPI.InteractableCategory.Invalid"/> for monsters,
            <see cref="F:R2API.DirectorAPI.InteractableCategory.Custom"/> for custom non-vanilla categories.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.DirectorCardHolder.CustomInteractableCategory">
            <summary>
            Should be null for vanilla categories
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.DirectorCardHolder.InteractableCategorySelectionWeight">
            <summary>
            This is only used in case the category didnt exist in the first place in the targeted DCCS.
            </summary>
        </member>
        <member name="M:R2API.DirectorAPI.AddCard(RoR2.DirectorCardCategorySelection,R2API.DirectorAPI.DirectorCardHolder)">
            <summary>
            Add a <see cref="T:R2API.DirectorAPI.DirectorCardHolder"/> to a <see cref="T:RoR2.DirectorCardCategorySelection"/>.
            If the category from the given card parameter is not in the given dccs parameter,
            the category is created and added to the dccs.
            Returns the card index in the category if successful.
            </summary>
            <param name="dccs"></param>
            <param name="cardHolder"></param>
            <returns></returns>
        </member>
        <member name="T:R2API.DirectorAPI.MonsterFamilyHolder">
            <summary>
            A wrapper class for Monster Families.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterFamilyHolder.MonsterCategoryToMonsterCards">
            <summary>
            List of all monster per monster category name that can spawn during this family event.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterFamilyHolder.MonsterCategoryToSelectionWeights">
            <summary>
            The selection weight per monster category name during the family event.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterFamilyHolder.MinStageCompletion">
            <summary>
            The minimum number of stages completed for this family event to occur.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterFamilyHolder.MaxStageCompletion">
            <summary>
            The maximum number of stages for this family event to occur.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterFamilyHolder.FamilySelectionWeight">
            <summary>
            The weight of this monster family relative to other monster families.
            Does NOT increase the chances of a family event occuring, just the chance that this will be chosen when one does occur.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.MonsterFamilyHolder.SelectionChatString">
            <summary>
            The message sent to chat when this family is selected.
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.Helpers">
            <summary>
            This subclass contains helper methods for use with DirectorAPI.
            Note that there is much more flexibility by working with the API directly through its event system.
            The primary purpose of these helpers is to serve as example code, and to assist with very simple tasks.
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.Helpers.MonsterNames">
            <summary>
            This class contains static strings for each <see cref="T:RoR2.CharacterSpawnCard"/> in the base game.
            These can be used for matching names.
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.Helpers.MonsterPoolCategories">
            <summary>
            Most vanilla <see cref="F:RoR2.ClassicStageInfo.monsterDccsPool"/> have (right now) 3 <see cref="T:RoR2.DccsPool.Category"/> in them,
            their name are inside this class.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.Standard">
            <summary>
            Standard pool category
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.StandardWeight">
            <summary>
            Weight of the standard pool category, usually 0.98f
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.Family">
            <summary>
            Family pool category
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.FamilyWeight">
            <summary>
            Weight of the Family pool category, usually 0.02f
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.VoidInvasion">
            <summary>
            Void Invasion pool category
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Helpers.MonsterPoolCategories.VoidInvasionWeight">
            <summary>
            Weight of the Void Invasion pool category, usually 0.02f
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.Helpers.InteractablePoolCategories">
            <summary>
            Most vanilla <see cref="F:RoR2.ClassicStageInfo.interactableDccsPool"/> have (right now) 1 <see cref="T:RoR2.DccsPool.Category"/> in them,
            their name are inside this class.
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Helpers.InteractablePoolCategories.Standard">
            <summary>
            Standard pool category
            </summary>
        </member>
        <member name="F:R2API.DirectorAPI.Helpers.InteractablePoolCategories.StandardWeight">
            <summary>
            Weight of the standard pool category, usually 1f
            </summary>
        </member>
        <member name="T:R2API.DirectorAPI.Helpers.InteractableNames">
            <summary>
            This class contains static strings for each <see cref="T:RoR2.InteractableSpawnCard"/> in the base game.
            These can be used for matching names.
            </summary>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.TryApplyChangesNow">
            <summary>
            Try applying changes for the current stage (hot swap) for monster and family changes
            </summary>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.PreventElites(System.String,System.Boolean)">
            <summary>
            Enables or disables elite spawns for a specific monster.
            </summary>
            <param name="monsterName">The name of the monster to edit</param>
            <param name="elitesAllowed">Should elites be allowed?</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonster(RoR2.DirectorCard,R2API.DirectorAPI.MonsterCategory)">
            <summary>
            Adds a new monster to all stages.
            </summary>
            <param name="monsterCard">The DirectorCard for the monster</param>
            <param name="monsterCategory">The category to add the monster to</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonster(R2API.DirectorAPI.DirectorCardHolder,System.Boolean)">
            <summary>
            Adds a new monster to all stages.
            Also add to each existing monster families if second parameter is true.
            </summary>
            <param name="monsterCard"></param>
            <param name="addToFamilies"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonster(R2API.DirectorAPI.DirectorCardHolder,System.Boolean,System.Predicate{RoR2.DirectorCardCategorySelection})">
            <summary>
            Adds a new monster to all stages.
            Also add to each existing monster families if second parameter is true.
            If a valid predicate is provided the monster will only be added to the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="monsterCard"></param>
            <param name="addToFamilies"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonster(RoR2.DccsPool,System.Collections.Generic.List{R2API.DirectorAPI.DirectorCardHolder},R2API.DirectorAPI.DirectorCardHolder,System.Boolean)">
            <summary>
            Adds a new monster to a pool of monsters that can spawn in a given stage (see <see cref="E:R2API.DirectorAPI.MonsterActions"/>).
            </summary>
            <param name="dccsPool"></param>
            <param name="mixEnemyArtifactMonsters"></param>
            <param name="monsterCardHolder"></param>
            <param name="addToFamilies">Whether to also add to each existing monster family</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonster(RoR2.DccsPool,System.Collections.Generic.List{R2API.DirectorAPI.DirectorCardHolder},R2API.DirectorAPI.DirectorCardHolder,System.Boolean,System.Predicate{RoR2.DirectorCardCategorySelection})">
            <summary>
            Adds a new monster to a pool of monsters that can spawn in a given stage (see <see cref="E:R2API.DirectorAPI.MonsterActions"/>).
            If a valid (non null) predicate is provided the monster will only be added to the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="dccsPool"></param>
            <param name="mixEnemyArtifactMonsters"></param>
            <param name="monsterCardHolder"></param>
            <param name="addToFamilies">Whether to also add to each existing monster family</param>
            <param name="predicate"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonsterToStage(RoR2.DirectorCard,R2API.DirectorAPI.MonsterCategory,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Adds a new monster to a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="monsterCard">The DirectorCard of the monster to add</param>
            <param name="monsterCategory">The category to add the monster to</param>
            <param name="stage">The stage to add the monster to</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonsterToStage(R2API.DirectorAPI.DirectorCardHolder,System.Boolean,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Adds a new monster to a specific stage.
            Also add to each existing monster families if second parameter is true.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="monsterCard"></param>
            <param name="addToFamilies"></param>
            <param name="stage"></param>
            <param name="customStageName"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonsterToStage(R2API.DirectorAPI.DirectorCardHolder,System.Boolean,System.Predicate{RoR2.DirectorCardCategorySelection},R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Adds a new monster to a specific stage.
            Also add to each existing monster families if second parameter is true.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            If a valid (non null) predicate is provided the monster will only be added to the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="monsterCard"></param>
            <param name="addToFamilies"></param>
            <param name="predicate"></param>
            <param name="stage"></param>
            <param name="customStageName"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonsterToStagesWhere(R2API.DirectorAPI.DirectorCardHolder,System.Boolean,System.Predicate{R2API.DirectorAPI.StageInfo})">
            <summary>
            Adds a new monster to matching stages.
            Also add to each existing monster families if second parameter is true.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="monsterCard"></param>
            <param name="addToFamilies"></param>
            <param name="matchStage"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewMonsterToStagesWhere(R2API.DirectorAPI.DirectorCardHolder,System.Boolean,System.Predicate{R2API.DirectorAPI.StageInfo},System.Predicate{RoR2.DirectorCardCategorySelection})">
            <summary>
            Adds a new monster to matching stages.
            Also add to each existing monster families if second parameter is true.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            If a valid (non null) predicate is provided the monster will only be added to the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="monsterCard"></param>
            <param name="addToFamilies"></param>
            <param name="matchStage"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewInteractable(RoR2.DirectorCard,R2API.DirectorAPI.InteractableCategory)">
            <summary>
            Adds a new interactable to all stages.
            </summary>
            <param name="interactableCard">The DirectorCard for the interactable</param>
            <param name="interactableCategory">The category of the interactable</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewInteractable(R2API.DirectorAPI.DirectorCardHolder)">
            <summary>
            Adds a new interactable to all stages.
            </summary>
            <param name="interactableCardHolder"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewInteractable(R2API.DirectorAPI.DirectorCardHolder,System.Predicate{RoR2.DirectorCardCategorySelection})">
            <summary>
            Adds a new interactable to all stages.
            If a valid (non null) predicate is provided the interactable will only be added to the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="interactableCardHolder"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewInteractableToStage(RoR2.DirectorCard,R2API.DirectorAPI.InteractableCategory,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Adds a new interactable to a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="interactableCard">The DirectorCard of the interactable</param>
            <param name="interactableCategory">The category of the interactable</param>
            <param name="stage">The stage to add the interactable to</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewInteractableToStage(R2API.DirectorAPI.DirectorCardHolder,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Adds a new interactable to a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="interactableCardHolder">The DirectorCardHolder, should have its Card and InteractableCategory members correctly filled</param>
            <param name="stage">The stage to add the interactable to</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddNewInteractableToStage(R2API.DirectorAPI.DirectorCardHolder,System.Predicate{RoR2.DirectorCardCategorySelection},R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Adds a new interactable to a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            If a valid (non null) predicate is provided the interactable will only be added to the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="interactableCardHolder">The DirectorCardHolder, should have its Card and InteractableCategory members correctly filled</param>
            <param name="predicate"></param>
            <param name="stage">The stage to add the interactable to</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.RemoveExistingMonster(System.String)">
            <summary>
            Removes a monster from spawns on all stages.
            </summary>
            <param name="monsterName">The name of the monster card to remove</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.RemoveExistingMonster(System.String,System.Boolean,System.Predicate{RoR2.DirectorCardCategorySelection})">
            <summary>
            Removes a monster from spawns on all stages.
            If a valid (non null) predicate is provided the monster will only be removed from the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="monsterName">The name of the monster card to remove</param>
            <param name="removeFromFamilies">Whether or not it the monster should be removed from familiy DCCSs</param>
            <param name="predicate">If a valid (non null) predicate is provided the monster will only be removed from the given DirectorCardCategorySelection if the predicate return true.</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.RemoveExistingMonsterFromStage(System.String,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Removes a monster from spawns on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="monsterName">The name of the monster card to remove</param>
            <param name="stage">The stage to remove on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.RemoveExistingMonsterFromStage(System.String,System.Boolean,System.Predicate{RoR2.DirectorCardCategorySelection},R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Removes a monster from spawns on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            If a valid (non null) predicate is provided the monster will only be removed from the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="monsterName">The name of the monster card to remove</param>
            <param name="removeFromFamilies">Whether or not it the monster should be removed from familiy DCCSs</param>
            <param name="predicate">If a valid (non null) predicate is provided the monster will only be removed from the given DirectorCardCategorySelection if the predicate return true.</param>
            <param name="stage">The stage to remove on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.RemoveExistingInteractable(System.String)">
            <summary>
            Remove an interactable from spawns on all stages.
            </summary>
            <param name="interactableName">Name of the interactable to remove</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.RemoveExistingInteractable(System.String,System.Predicate{RoR2.DirectorCardCategorySelection})">
            <summary>
            Remove an interactable from spawns on all stages.
            If a valid (non null) predicate is provided the interactable will only be removed from the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="interactableName">Name of the interactable to remove</param>
            <param name="predicate">If a valid (non null) predicate is provided the interactable will only be removed from the given DirectorCardCategorySelection if the predicate return true.</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.RemoveExistingInteractableFromStage(System.String,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Remove an interactable from spawns on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="interactableName">The name of the interactable to remove</param>
            <param name="stage">The stage to remove on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.RemoveExistingInteractableFromStage(System.String,System.Predicate{RoR2.DirectorCardCategorySelection},R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Remove an interactable from spawns on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            If a valid (non null) predicate is provided the interactable will only be removed from the given DirectorCardCategorySelection if the predicate return true.
            </summary>
            <param name="interactableName">The name of the interactable to remove</param>
            <param name="predicate"></param>
            <param name="stage">The stage to remove on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddSceneMonsterCredits(System.Int32,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Adds a flat amount of monster credits to the scene director on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="increase">The quantity to add</param>
            <param name="stage">The stage to add on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.AddSceneInteractableCredits(System.Int32,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Adds a flat amount of interactable credits to the scene director on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="increase">The quantity to add</param>
            <param name="stage">The stage to add on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.MultiplySceneMonsterCredits(System.Int32,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Multiplies the scene director monster credits on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="multiplier">The number to multiply by</param>
            <param name="stage">The stage to multiply on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.MultiplySceneInteractableCredits(System.Int32,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Multiplies the scene director interactable credits on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="multiplier">The number to multiply by</param>
            <param name="stage">The stage to multiply on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.ReduceSceneMonsterCredits(System.Int32,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Divides the scene director monster credits on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="divisor">The number to divide by</param>
            <param name="stage">The stage to divide on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.ReduceSceneInteractableCredits(System.Int32,R2API.DirectorAPI.Stage,System.String)">
            <summary>
            Divides the scene director interactable credits on a specific stage.
            For custom stages use Stage.Custom and enter the name of the stage in customStageName.
            </summary>
            <param name="divisor">The number to divide by</param>
            <param name="stage">The stage to divide on</param>
            <param name="customStageName">The name of the custom stage</param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.ForEachPoolEntryInDccsPool(RoR2.DccsPool,System.Action{RoR2.DccsPool.PoolEntry})">
            <summary>
            For each <see cref="T:RoR2.DccsPool.PoolEntry"/> in a <see cref="T:RoR2.DccsPool"/>, call the given <see cref="T:System.Action"/>.
            </summary>
            <param name="dccsPool"></param>
            <param name="action"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.ForEachPoolCategoryInDccsPool(RoR2.DccsPool,System.Action{RoR2.DccsPool.Category})">
            <summary>
            For each <see cref="T:RoR2.DccsPool.Category"/> in a <see cref="T:RoR2.DccsPool"/>, call the given <see cref="T:System.Action"/>.
            </summary>
            <param name="dccsPool"></param>
            <param name="action"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.ForEachPoolEntryInDccsPoolCategory(RoR2.DccsPool.Category,System.Action{RoR2.DccsPool.PoolEntry})">
            <summary>
            For each <see cref="T:RoR2.DccsPool.PoolEntry"/> in a <see cref="T:RoR2.DccsPool.Category"/>, call the given <see cref="T:System.Action"/>.
            </summary>
            <param name="dccsPoolCategory"></param>
            <param name="action"></param>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.IsSameMonsterCategory(RoR2.DirectorCardCategorySelection.Category@,R2API.DirectorAPI.MonsterCategory)">
            <summary>
            Returns true if the <see cref="F:RoR2.DirectorCardCategorySelection.Category.name"/> is the same as the <see cref="T:R2API.DirectorAPI.MonsterCategory"/>
            </summary>
            <param name="category"></param>
            <param name="monsterCategory"></param>
            <returns></returns>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.GetMonsterCategory(System.String)">
            <summary>
            Returns the enum value corresponding the given string, returns <see cref="F:R2API.DirectorAPI.MonsterCategory.Custom"/> if the category is a custom one.
            </summary>
            <param name="categoryString"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.GetVanillaMonsterCategoryName(R2API.DirectorAPI.MonsterCategory)">
            <summary>
            Get the string corresponding to the given vanilla <see cref="T:R2API.DirectorAPI.MonsterCategory"/>.
            Throws if the given <see cref="T:R2API.DirectorAPI.MonsterCategory"/> is not vanilla.
            </summary>
            <param name="monsterCategory"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.GetInteractableCategory(System.String)">
            <summary>
            Returns the enum value corresponding the given string, returns <see cref="F:R2API.DirectorAPI.InteractableCategory.Custom"/> if the category is a custom one.
            </summary>
            <param name="categoryString"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.GetVanillaInteractableCategoryName(R2API.DirectorAPI.InteractableCategory)">
            <summary>
            Get the string corresponding to the given vanilla <see cref="T:R2API.DirectorAPI.InteractableCategory"/>.
            Throws if the given <see cref="T:R2API.DirectorAPI.InteractableCategory"/> is not vanilla.
            </summary>
            <param name="interactableCategory"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:R2API.DirectorAPI.Helpers.IsSameInteractableCategory(RoR2.DirectorCardCategorySelection.Category@,R2API.DirectorAPI.InteractableCategory)">
            <summary>
            Returns true if the <see cref="F:RoR2.DirectorCardCategorySelection.Category.name"/> is the same as the <see cref="T:R2API.DirectorAPI.InteractableCategory"/>
            </summary>
            <param name="category"></param>
            <param name="interactableCategory"></param>
            <returns></returns>
        </member>
        <member name="F:R2API.DirectorAPI.PluginVersion">
            <summary>
            Version of the plugin, should be matching with the thunderstore package.
            </summary>
        </member>
        <member name="T:R2API.AutoVersionGen.AutoVersionAttribute">
            <summary>
            Add a PluginVersion field to the attribut-ed class filled from the thunderstore.toml versionNumber field
            </summary>
        </member>
    </members>
</doc>
