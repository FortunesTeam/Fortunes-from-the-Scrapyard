<?xml version="1.0"?>
<doc>
    <assembly>
        <name>R2API.Addressables</name>
    </assembly>
    <members>
        <member name="F:R2API.AddressablesPlugin.PluginVersion">
            <summary>
            Version of the plugin, should be matching with the thunderstore package.
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1">
            <summary>
            A <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset"/> is a class that's used for referencing assets ingame.
            <br></br>
            <br>The asset referenced can either be a direct reference, or a reference via an address</br>
            <br>Some <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/> can load their assets via catalog, such as <see cref="T:R2API.AddressReferencedAssets.AddressReferencedItemDef"/></br>
            <br>An <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/> has implicit operators for casting to it's <typeparamref name="T"/> Type, and for casting into a boolean. It also has implicit operators for encapsulating a <see cref="T:System.String"/> and <typeparamref name="T"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/></br>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset">
            <summary>
            The Asset of type <typeparamref name="T"/> contained by this <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset"/>
            <para><b>Get behaviour</b></para>
            <br>If the asset has not been loaded or is null, the asset is loaded synchronously via addressables.</br>
            <br>In the scenario where <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.CanLoadFromCatalog"/> is set to true, the asset itself is null, and <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset.Initialized"/> is false, a warning message is displayed, this is because the AddressReferencedAsset instance can use an asset name directly by loading it via the game's catalogues.</br>
            <para><b>Set Behaviour</b></para>
            <br>Setting this property sets the address to null if the provided value is not null.</br>
            </summary>
        </member>
        <member name="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.AssetExists">
            <summary>
            Determines wether <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/>'s backing field has a value.
            </summary>
        </member>
        <member name="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Address">
            <summary>
            The string to use for loading the <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/>
            <br>Setting this value sets the current <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/> to null and <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.UseDirectReference"/> to false. if the game has already finished loading, the new Asset is loaded.</br>
            </summary>
        </member>
        <member name="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.IsInvalid">
            <summary>
            Whether the AddressReferencedAsset is considered Invalid.
            <para>For an AddressReferencedAsset to be invalid it must have the following characteristics:</para>
            <br>A: <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/>'s backing field value is null</br>
            <br>B: <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Address"/>'s backing field value is null, empty or whitespace</br>
            </summary>
        </member>
        <member name="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.UseDirectReference">
            <summary>
            Wether this AddressReferencedAsset is using a DirectReference (<see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/> is not null) or an Address Reference (<see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/> is null)
            <br>Mainly used for Editor related scripts</br>
            </summary>
        </member>
        <member name="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.CanLoadFromCatalog">
            <summary>
            Wether this AddressReferencedAsset can load an Asset using the game's catalogues.
            <br>If this is true, you're encouraged to wait for AddressReferencedAsset to initialize fully using <see cref="E:R2API.AddressReferencedAssets.AddressReferencedAsset.OnAddressReferencedAssetsLoaded"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.LoadAssetAsync">
            <summary>
            Loads the asset asynchronously if <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/> is not null and <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Address"/> is not null or empty.
            <br>This is automatically called by the AddressReferencedAsset system and should not be called manually.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Load">
            <summary>
            Implement how the Asset of type <typeparamref name="T"/> is loaded synchronously when <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/> is null
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.LoadAsync">
            <summary>
            Implement how the Asset of type <typeparamref name="T"/> is loaded asynchronously when <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/> is null
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.LoadFromAddressAsync">
            <summary>
            Loads the Asset asynchronously via <see cref="T:UnityEngine.AddressableAssets.Addressables"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.LoadFromAddress">
            <summary>
            Loads the Asset synchronously via <see cref="T:UnityEngine.AddressableAssets.Addressables"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedAsset{`0})~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedAsset{`0})~`0">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/> to it's currently loaded <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedAsset{`0}">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.op_Implicit(`0)~R2API.AddressReferencedAssets.AddressReferencedAsset{`0}">
            <summary>
            Operator for encapsulating an asset of type <typeparamref name="T"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)">
            <summary>
            Constructor for <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br><see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Asset"/> will be set to <paramref name="asset"/> and <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.UseDirectReference"/> to true</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br><see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Address"/> will be set to <paramref name="address"/> and <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.UseDirectReference"/> to false</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor">
            <summary>
            Parameterless Constructor for <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.Finalize">
            <summary>
            <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/> Deconstructor
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedAsset">
            <summary>
            A <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset"/> is a class that's used for referencing assets ingame.
            <br>You're strongly adviced to use <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/> instead.</br> 
            </summary>
        </member>
        <member name="P:R2API.AddressReferencedAssets.AddressReferencedAsset.Initialized">
            <summary>
            Wether or not the <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset"/> system has initialized.
            <br>Particularly useful for interacting with <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/> who's <see cref="P:R2API.AddressReferencedAssets.AddressReferencedAsset`1.CanLoadFromCatalog"/> is true, such as <see cref="T:R2API.AddressReferencedAssets.AddressReferencedItemDef"/></br>
            </summary>
        </member>
        <member name="E:R2API.AddressReferencedAssets.AddressReferencedAsset.OnAddressReferencedAssetsLoaded">
            <summary>
            An event that gets invoked when all the AddressReferencedAssets have been loaded.
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset.SetHooks">
            <summary>
            Sets hooks for the AddressReferencedSystem, any constructor from classes inheriting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset"/> must call it.
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedAsset.UnsetHooks">
            <summary>
            Unsets hooks for the AddressReferencedSystem, any deconstructor from classes inheriting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset"/> must call it IF <see cref="F:R2API.AddressReferencedAssets.AddressReferencedAsset.instances"/>'s count is 0
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedBuffDef">
            <summary>
            <inheritdoc cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br>T is <see cref="T:RoR2.BuffDef"/></br>
            <br>The <see cref="T:RoR2.BuffDef"/> can also be loaded via the <see cref="T:RoR2.BuffCatalog"/>, as such, you should wait until <see cref="E:R2API.AddressReferencedAssets.AddressReferencedAsset.OnAddressReferencedAssetsLoaded"/> gets raised.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedBuffDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedBuffDef)~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedBuffDef"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedBuffDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedBuffDef)~RoR2.BuffDef">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedBuffDef"/> to it's currently loaded <see cref="!:Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedBuffDef.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedBuffDef">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedBuffDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedBuffDef.op_Implicit(RoR2.BuffDef)~R2API.AddressReferencedAssets.AddressReferencedBuffDef">
            <summary>
            Operator for encapsulating an <see cref="T:RoR2.BuffDef"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedBuffDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedBuffDef.#ctor">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor"/>
            <br>T is <see cref="T:RoR2.BuffDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedBuffDef.#ctor(RoR2.BuffDef)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)"/>
            <br>T is <see cref="T:RoR2.BuffDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedBuffDef.#ctor(System.String)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)"/>
            <br>T is <see cref="T:RoR2.BuffDef"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedEliteDef">
            <summary>
            <inheritdoc cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br>T is <see cref="T:RoR2.EliteDef"/></br>
            <br>The <see cref="T:RoR2.EliteDef"/> can also be loaded via the <see cref="T:RoR2.EliteCatalog"/>, as such, you should wait until <see cref="E:R2API.AddressReferencedAssets.AddressReferencedAsset.OnAddressReferencedAssetsLoaded"/> gets raised.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEliteDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedEliteDef)~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedEliteDef"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEliteDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedEliteDef)~RoR2.EliteDef">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedEliteDef"/> to it's currently loaded <see cref="!:Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEliteDef.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedEliteDef">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedEliteDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEliteDef.op_Implicit(RoR2.EliteDef)~R2API.AddressReferencedAssets.AddressReferencedEliteDef">
            <summary>
            Operator for encapsulating an <see cref="T:RoR2.EliteDef"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedEliteDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEliteDef.#ctor">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor"/>
            <br>T is <see cref="T:RoR2.EliteDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEliteDef.#ctor(RoR2.EliteDef)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)"/>
            <br>T is <see cref="T:RoR2.EliteDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEliteDef.#ctor(System.String)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)"/>
            <br>T is <see cref="T:RoR2.EliteDef"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef">
            <summary>
            <inheritdoc cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br>T is <see cref="T:RoR2.EquipmentDef"/></br>
            <br>The <see cref="T:RoR2.EquipmentDef"/> can also be loaded via the <see cref="T:RoR2.EquipmentCatalog"/>, as such, you should wait until <see cref="E:R2API.AddressReferencedAssets.AddressReferencedAsset.OnAddressReferencedAssetsLoaded"/> gets raised.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedEquipmentDef)~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedEquipmentDef)~RoR2.EquipmentDef">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef"/> to it's currently loaded <see cref="!:Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedEquipmentDef">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef.op_Implicit(RoR2.EquipmentDef)~R2API.AddressReferencedAssets.AddressReferencedEquipmentDef">
            <summary>
            Operator for encapsulating an <see cref="T:RoR2.EquipmentDef"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef.#ctor">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor"/>
            <br>T is <see cref="T:RoR2.EquipmentDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef.#ctor(RoR2.EquipmentDef)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)"/>
            <br>T is <see cref="T:RoR2.EquipmentDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedEquipmentDef.#ctor(System.String)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)"/>
            <br>T is <see cref="T:RoR2.EquipmentDef"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedExpansionDef">
            <summary>
            <inheritdoc cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br>T is <see cref="T:RoR2.ExpansionManagement.ExpansionDef"/></br>
            <br>The <see cref="T:RoR2.ExpansionManagement.ExpansionDef"/> can also be loaded via the <see cref="T:RoR2.ExpansionManagement.ExpansionCatalog"/>, as such, you should wait until <see cref="E:R2API.AddressReferencedAssets.AddressReferencedAsset.OnAddressReferencedAssetsLoaded"/> gets raised.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedExpansionDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedExpansionDef)~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedExpansionDef"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedExpansionDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedExpansionDef)~RoR2.ExpansionManagement.ExpansionDef">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedExpansionDef"/> to it's currently loaded <see cref="!:Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedExpansionDef.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedExpansionDef">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedExpansionDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedExpansionDef.op_Implicit(RoR2.ExpansionManagement.ExpansionDef)~R2API.AddressReferencedAssets.AddressReferencedExpansionDef">
            <summary>
            Operator for encapsulating an <see cref="T:RoR2.ExpansionManagement.ExpansionDef"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedExpansionDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedExpansionDef.#ctor">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor"/>
            <br>T is <see cref="T:RoR2.ExpansionManagement.ExpansionDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedExpansionDef.#ctor(RoR2.ExpansionManagement.ExpansionDef)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)"/>
            <br>T is <see cref="T:RoR2.ExpansionManagement.ExpansionDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedExpansionDef.#ctor(System.String)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)"/>
            <br>T is <see cref="T:RoR2.ExpansionManagement.ExpansionDef"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedItemDef">
            <summary>
            <inheritdoc cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br>T is <see cref="T:RoR2.ItemDef"/></br>
            <br>The <see cref="T:RoR2.ItemDef"/> can also be loaded via the <see cref="T:RoR2.ItemCatalog"/>, as such, you should wait until <see cref="E:R2API.AddressReferencedAssets.AddressReferencedAsset.OnAddressReferencedAssetsLoaded"/> gets raised.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedItemDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedItemDef)~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedItemDef"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedItemDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedItemDef)~RoR2.ItemDef">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedItemDef"/> to it's currently loaded <see cref="!:Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedItemDef.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedItemDef">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedItemDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedItemDef.op_Implicit(RoR2.ItemDef)~R2API.AddressReferencedAssets.AddressReferencedItemDef">
            <summary>
            Operator for encapsulating an <see cref="T:RoR2.ItemDef"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedItemDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedItemDef.#ctor">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor"/>
            <br>T is <see cref="T:RoR2.ItemDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedItemDef.#ctor(RoR2.ItemDef)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)"/>
            <br>T is <see cref="T:RoR2.ItemDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedItemDef.#ctor(System.String)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)"/>
            <br>T is <see cref="T:RoR2.ItemDef"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedPrefab">
            <summary>
            <inheritdoc cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br>T is <see cref="T:UnityEngine.GameObject"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedPrefab.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedPrefab)~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedPrefab"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedPrefab.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedPrefab)~UnityEngine.GameObject">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedPrefab"/> to it's currently loaded <see cref="!:Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedPrefab.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedPrefab">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedPrefab"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedPrefab.op_Implicit(UnityEngine.GameObject)~R2API.AddressReferencedAssets.AddressReferencedPrefab">
            <summary>
            Operator for encapsulating an <see cref="T:UnityEngine.GameObject"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedPrefab"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedPrefab.#ctor">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor"/>
            <br>T is <see cref="T:UnityEngine.GameObject"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedPrefab.#ctor(UnityEngine.GameObject)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)"/>
            <br>T is <see cref="T:UnityEngine.GameObject"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedPrefab.#ctor(System.String)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)"/>
            <br>T is <see cref="T:UnityEngine.GameObject"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedSpawnCard">
            <summary>
            <inheritdoc cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br>T is <see cref="T:RoR2.SpawnCard"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedSpawnCard.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedSpawnCard)~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedSpawnCard"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedSpawnCard.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedSpawnCard)~RoR2.SpawnCard">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedSpawnCard"/> to it's currently loaded <see cref="!:Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedSpawnCard.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedSpawnCard">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedSpawnCard"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedSpawnCard.op_Implicit(RoR2.SpawnCard)~R2API.AddressReferencedAssets.AddressReferencedSpawnCard">
            <summary>
            Operator for encapsulating an <see cref="T:RoR2.SpawnCard"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedSpawnCard"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedSpawnCard.#ctor">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor"/>
            <br>T is <see cref="T:RoR2.SpawnCard"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedSpawnCard.#ctor(RoR2.SpawnCard)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)"/>
            <br>T is <see cref="T:RoR2.SpawnCard"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedSpawnCard.#ctor(System.String)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)"/>
            <br>T is <see cref="T:RoR2.SpawnCard"/></br>
            </summary>
        </member>
        <member name="T:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef">
            <summary>
            <inheritdoc cref="T:R2API.AddressReferencedAssets.AddressReferencedAsset`1"/>
            <br>T is <see cref="T:RoR2.UnlockableDef"/></br>
            <br>The <see cref="T:RoR2.UnlockableDef"/> can also be loaded via the <see cref="T:RoR2.UnlockableCatalog"/>, as such, you should wait until <see cref="E:R2API.AddressReferencedAssets.AddressReferencedAsset.OnAddressReferencedAssetsLoaded"/> gets raised.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedUnlockableDef)~System.Boolean">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef"/> to a boolean value
            <br>Allows you to keep using the unity Syntax for checking if an object exists.</br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef.op_Implicit(R2API.AddressReferencedAssets.AddressReferencedUnlockableDef)~RoR2.UnlockableDef">
            <summary>
            Operator for casting <see cref="T:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef"/> to it's currently loaded <see cref="!:Asset"/> value
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef.op_Implicit(System.String)~R2API.AddressReferencedAssets.AddressReferencedUnlockableDef">
            <summary>
            Operator for encapsulating a <see cref="T:System.String"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef.op_Implicit(RoR2.UnlockableDef)~R2API.AddressReferencedAssets.AddressReferencedUnlockableDef">
            <summary>
            Operator for encapsulating an <see cref="T:RoR2.UnlockableDef"/> inside an <see cref="T:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef"/>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef.#ctor">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor"/>
            <br>T is <see cref="T:RoR2.UnlockableDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef.#ctor(RoR2.UnlockableDef)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(`0)"/>
            <br>T is <see cref="T:RoR2.UnlockableDef"/></br>
            </summary>
        </member>
        <member name="M:R2API.AddressReferencedAssets.AddressReferencedUnlockableDef.#ctor(System.String)">
            <summary>
            <inheritdoc cref="M:R2API.AddressReferencedAssets.AddressReferencedAsset`1.#ctor(System.String)"/>
            <br>T is <see cref="T:RoR2.UnlockableDef"/></br>
            </summary>
        </member>
        <member name="T:R2API.AutoVersionGen.AutoVersionAttribute">
            <summary>
            Add a PluginVersion field to the attribut-ed class filled from the thunderstore.toml versionNumber field
            </summary>
        </member>
    </members>
</doc>
