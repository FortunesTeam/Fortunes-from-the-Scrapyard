<?xml version="1.0"?>
<doc>
    <assembly>
        <name>R2API.Core</name>
    </assembly>
    <members>
        <member name="M:R2API.Utils.EnumerableExtensions.ForEachTry``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Collections.Generic.IDictionary{``0,System.Exception})">
            <summary>
            ForEach but with a try catch in it.
            </summary>
            <param name="list">the enumerable object</param>
            <param name="action">the action to do on it</param>
            <param name="exceptions">the exception dictionary that will get filled, null by default if you simply want to silence the errors if any pop.</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:R2API.Utils.R2APISubmoduleDependency">
            <summary>
            Attribute to have at the top of your BaseUnityPlugin class if you want to load a specific R2API Submodule.
            Parameter(s) are the nameof the submodules.
            e.g: [R2APISubmoduleDependency("SurvivorAPI", "ItemAPI")]
            </summary>
        </member>
        <member name="M:R2API.Utils.ChatMessage.Send(System.String)">
            <summary>
            Send a message to the chat
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:R2API.Utils.ChatMessage.Send(System.String,System.String)">
            <summary>
            Send a message to the chat in the format "messageFrom: message"
            </summary>
            <param name="message"></param>
            <param name="messageFrom"></param>
        </member>
        <member name="M:R2API.Utils.CompressedFlagArrayUtilities.ReadFromNetworkReader(UnityEngine.Networking.NetworkReader,System.Int32)">
            <summary>
            Reads compressed value from the NerworkReader.
            More info about that can be found in the PRs:
            https://github.com/risk-of-thunder/R2API/pull/284
            https://github.com/risk-of-thunder/R2API/pull/464
            </summary>
            <param name="reader"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:R2API.Utils.CompressedFlagArrayUtilities.WriteToNetworkWriter(System.Byte[],UnityEngine.Networking.NetworkWriter,System.Int32)" -->
        <member name="T:R2API.Utils.DirectMessage">
            <summary>
            Class for sending messages directly to singular clients. Mostly useful for Dedicated servers.
            </summary>
        </member>
        <member name="M:R2API.Utils.DirectMessage.GetConnectionNetworkUsers(UnityEngine.Networking.NetworkConnection)">
            <summary>
            returns NetworkUsers associated to a NetworkConnection
            </summary>
            <param name="conn"></param>
            <returns>returns NetworkUsers associated to a NetworkConnection</returns>
        </member>
        <member name="M:R2API.Utils.DirectMessage.ResolveUserToConnection(RoR2.NetworkUser)">
            <summary>
            Converts NetworkUser to NetworkConnection
            </summary>
            <param name="user"></param>
            <returns>NetworkUser's NetworkConnection</returns>
        </member>
        <member name="M:R2API.Utils.DirectMessage.SendDirectMessage(System.String,UnityEngine.Networking.NetworkConnection)">
            <summary>
            Sends a string directly to a connection. Useful for when you don't want to take advantage of any preformatted string found in RoR2.Chat.
            </summary>
            <param name="message">The message to send</param>
            <param name="connection">The network connection to send to.</param>
        </member>
        <member name="M:R2API.Utils.DirectMessage.SendDirectMessage(System.String,RoR2.NetworkUser)">
            <summary>
            Sends a string directly to a user. Useful for when you don't want to take advantage of any preformatted string found in RoR2.Chat.
            </summary>
            <param name="message">The message to send</param>
            <param name="user">The network user to send to.</param>
        </member>
        <member name="M:R2API.Utils.DirectMessage.SendDirectMessage(RoR2.ChatMessageBase,UnityEngine.Networking.NetworkConnection)">
            <summary>
            Sends a ChatMessage directly to a connection. Checkout RoR2.Chat for possible chatmessage types.
            </summary>
            <param name="message">The message to send</param>
            <param name="connection">The network connection to send to.</param>
        </member>
        <member name="T:R2API.Utils.CompatibilityLevel">
            <summary>
            Enum used for telling whether or not the mod should be needed by everyone in multiplayer games.
            Also can specify if the mod does not work in multiplayer.
            </summary>
        </member>
        <member name="T:R2API.Utils.VersionStrictness">
            <summary>
            Enum used for telling whether or not the same mod version should be used by both the server and the clients.
            This enum is only useful if CompatibilityLevel.EveryoneMustHaveMod was chosen.
            </summary>
        </member>
        <member name="T:R2API.Utils.NetworkCompatibility">
            <summary>
            Attribute to have at the top of your BaseUnityPlugin class if
            you want to specify if the mod should be installed by everyone in multiplayer games or not.
            If the mod is required to be installed by everyone, you'll need to also specify if the same mod version should be used by everyone or not.
            By default, it's supposed that everyone needs the mod and the same version.
            e.g: [NetworkCompatibility(CompatibilityLevel.NoNeedForSync)]
            </summary>
        </member>
        <member name="P:R2API.Utils.NetworkCompatibility.CompatibilityLevel">
            <summary>
            Used for telling whether or not the mod should be needed by everyone in multiplayer games.
            </summary>
        </member>
        <member name="P:R2API.Utils.NetworkCompatibility.VersionStrictness">
            <summary>
            Enum used for telling whether or not the same mod version should be used by both the server and the clients.
            This enum is only useful if CompatibilityLevel.EveryoneMustHaveMod was chosen.
            </summary>
        </member>
        <member name="M:R2API.Utils.Reflection.GetFieldCached``1(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> of the type by name and caches it
            </summary>
            <typeparam name="T">The type to search</typeparam>
            <param name="name">The name of the field to find</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetFieldCached(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo" /> of the type by name and caches it
            </summary>
            <param name="T">The type to search</param>
            <param name="name">The name of the field to find</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetFieldValue``1(System.Object,System.String)">
            <summary>
            Gets the value of the field on the object
            </summary>
            <typeparam name="TReturn">The type of the return value</typeparam>
            <param name="fieldName">The name of the field to get the value of</param>
            <param name="instance">The object to get the field's value from</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetFieldValue``1(System.Type,System.String)">
            <summary>
            Gets the value of the specified static field on the specified static type
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="staticType">The name of the static field to get the value of</param>
            <param name="fieldName">The type to get the specified static field's value on</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.SetFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Sets the value of the specified field on the specified object; if the object is a struct use
            <see cref="M:R2API.Utils.Reflection.SetStructFieldValue``2(``0@,System.String,``1)"/> instead
            </summary>
            <typeparam name="TValue">The type of the value to set</typeparam>
            <param name="instance">The name of the field to set the value of</param>
            <param name="fieldName">The type to set the specified field's value on</param>
            <param name="value">The value to set</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.SetFieldValue``1(System.Type,System.String,``0)">
            <summary>
            Sets the value of the specified static field on the specified static type
            </summary>
            <typeparam name="TValue">The type of the value to set</typeparam>
            <param name="staticType">The name of the static field to set the value of</param>
            <param name="fieldName">The type to set the specified static field's value on</param>
            <param name="value">The value to set</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.SetStructFieldValue``2(``0@,System.String,``1)">
            <summary>
            Sets the value of the specified field on the specified struct
            </summary>
            <typeparam name="TInstance">The type of the instance of the struct</typeparam>
            <typeparam name="TValue">The type of the value to set</typeparam>
            <param name="instance">The name of the field to set the value of</param>
            <param name="fieldName">The type to set the specified field's value on</param>
            <param name="value">The value to set the field to</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetFieldFull(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> on the specified <see cref="T:System.Type"/> and searches base types if not found.
            </summary>
            <param name="T">The <see cref="T:System.Type"/> to search and get base types from</param>
            <param name="name">The name of the property to search for.</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetPropertyCached``1(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> of the type by name
            </summary>
            <typeparam name="T">The type on which to find the property</typeparam>
            <param name="name">The name of the property to get</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetPropertyCached(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> of the type by name
            </summary>
            <param name="T">The type to get the <see cref="T:System.Reflection.PropertyInfo"/> from</param>
            <param name="name">The name of the property to get</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Gets the value of the property on the specified object; if the object is a struct use
            <see cref="M:R2API.Utils.Reflection.GetStructPropertyValue``2(``0@,System.String)"></see> instead
            </summary>
            <typeparam name="TReturn">The type of the return value</typeparam>
            <param name="instance">The object to get the property's value from</param>
            <param name="propName">The name of the field to get the value of</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetPropertyValue``1(System.Type,System.String)">
            <summary>
            Gets the value of the static property on the specified static type
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="staticType">The name of the static field to get the value of</param>
            <param name="propName">The type to get the specified static property's value on</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets the value of the property on the specified class; if you're setting the property on a
            struct use <see cref="M:R2API.Utils.Reflection.SetStructPropertyValue``2(``0@,System.String,``1)"/> instead
            </summary>
            <typeparam name="TValue">The type of the value to set</typeparam>
            <param name="instance">The name of the field to set the value of</param>
            <param name="propName">The type to set the specified property's value on</param>
            <param name="value">The value to set</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.SetPropertyValue``1(System.Type,System.String,``0)">
            <summary>
            Sets the value of the static property on the specified static class
            </summary>
            <typeparam name="TValue">The type of the value to set</typeparam>
            <param name="staticType">The name of the static field to set the value of</param>
            <param name="propName">The type to set the specified static property's value on</param>
            <param name="value">The value to set the property to</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.SetStructPropertyValue``2(``0@,System.String,``1)">
            <summary>
            Sets the value of the specified property on the specified struct
            </summary>
            <typeparam name="TInstance">The type of the instance of the struct</typeparam>
            <typeparam name="TValue">The type of the value to set</typeparam>
            <param name="instance">The name of the field to set the value of</param>
            <param name="propName">The type to set the specified property's value on</param>
            <param name="value">The value to set the property to</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetStructPropertyValue``2(``0@,System.String)">
            <summary>
            Gets the value of the specified property on the specified struct
            </summary>
            <typeparam name="TInstance">The type of the struct</typeparam>
            <typeparam name="TValue">The type of the value to set</typeparam>
            <param name="instance">The name of the field to set the value of</param>
            <param name="propName">The type to set the specified property's value on</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetMethodCached``1(System.String)">
            <summary>
            Gets the method on the specified type and caches it
            </summary>
            <typeparam name="T">The type to search</typeparam>
            <param name="name">The name of the method to find</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetMethodCached(System.Type,System.String)">
            <summary>
            Gets the method on the specified static type and caches it
            </summary>
            <param name="T">The type to search</param>
            <param name="name">The name of the method to find</param>
            <returns>The found <see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetMethodWithConstructedGenericParameter(System.Type,System.String,System.Type)">
            <summary>
            Gets the generic method of the specified type with the specified generic type definition parameter
            </summary>
            <param name="T">The type to search</param>
            <param name="name">The name of the method to find</param>
            <param name="genericTypeDefinition">The generic type definition parameter</param>
            <returns>The found <see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetMethodCached``1(System.String,System.Type[])">
            <summary>
            Gets the method on the specified type and caches it. This overload is used when the method is ambiguous
            </summary>
            <typeparam name="T">The type to search</typeparam>
            <param name="name">The name of the method to find</param>
            <param name="argumentTypes">The types of the argument</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetMethodCached(System.Type,System.String,System.Type[])">
            <summary>
            Gets the method on the specified static type and caches it. This overload is used when the method is ambiguous
            </summary>
            <param name="T">The type to search</param>
            <param name="name">The name of the method to find</param>
            <param name="argumentTypes">The types of the argument</param>
        </member>
        <member name="M:R2API.Utils.Reflection.InvokeMethod``1(System.Object,System.String)">
            <summary>
            Invoke a method on the specified object by name
            </summary>
            <typeparam name="TReturn">The return type of the method</typeparam>
            <param name="instance">The object to invoke the method on</param>
            <param name="methodName">The name of the method to invoke</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.InvokeMethod``1(System.Type,System.String)">
            <summary>
            Invoke a static method on the specified type by name
            </summary>
            <typeparam name="TReturn">The return type of the method</typeparam>
            <param name="staticType">The static type to search</param>
            <param name="methodName">The name of the method to invoke</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.InvokeMethod(System.Object,System.String)">
            <summary>
            Invoke a method on the specified object by name
            </summary>
            <param name="instance">The object to invoke the method on</param>
            <param name="methodName">The name of the method to invoke</param>
        </member>
        <member name="M:R2API.Utils.Reflection.InvokeMethod(System.Type,System.String)">
            <summary>
            Invoke a static method on the specified type by name
            </summary>
            <param name="staticType">The static type to search</param>
            <param name="methodName">The name of the method to invoke</param>
        </member>
        <member name="M:R2API.Utils.Reflection.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Invoke a method on the specified object by name with parameters
            </summary>
            <typeparam name="TReturn">The return type of the method</typeparam>
            <param name="instance">The object to invoke the method on</param>
            <param name="methodName">The name of the method to invoke</param>
            <param name="methodParams"></param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.InvokeMethod``1(System.Type,System.String,System.Object[])">
            <summary>
            Invoke a static method on the specified type by name with parameters
            </summary>
            <typeparam name="TReturn">The return type of the method</typeparam>
            <param name="staticType">The static type to search</param>
            <param name="methodName">The name of the method to invoke</param>
            <param name="methodParams">The method parameters</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invoke a method on the specified object by name with parameters
            </summary>
            <param name="instance">The object to invoke the method on</param>
            <param name="methodName">The name of the method to invoke</param>
            <param name="methodParams"></param>
        </member>
        <member name="M:R2API.Utils.Reflection.InvokeMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invoke a static method on the specified type by name with parameters
            </summary>
            <param name="staticType">The static type to search</param>
            <param name="methodName">The name of the method to invoke</param>
            <param name="methodParams"></param>
        </member>
        <member name="M:R2API.Utils.Reflection.GetConstructorCached``1(System.Type[])">
            <summary>
            Gets the constructor on the specified type with specified arguments and caches it
            </summary>
            <typeparam name="T">The type to search</typeparam>
            <param name="argumentTypes">The types of the arguments on the constructor to find</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetConstructorCached(System.Type,System.Type[])">
            <summary>
            Gets the constructor on the specified static type with specified arguments and caches it
            </summary>
            <param name="T">The type to search</param>
            <param name="argumentTypes">The types of the arguments on the constructor to find</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetNestedType``1(System.String)">
            <summary>
            Gets the nested type on the specified type
            </summary>
            <typeparam name="T">The type to search</typeparam>
            <param name="name">The name of the nested type to find</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetNestedTypeCached``1(System.String)">
            <summary>
            Gets the nested type on the specified type
            </summary>
            <typeparam name="T">The type to search</typeparam>
            <param name="name">The name of the nested type to find</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetNestedTypeCached(System.Type,System.String)">
            <summary>
            Gets the nested type on the specified static type
            </summary>
            <param name="T">The static type to search</param>
            <param name="name">The name of the nested type to find</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.Instantiate(System.Type)">
            <summary>
            Instatiates the specified type
            </summary>
            <param name="type">The type to instantiate</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.Instantiate(System.Type,System.Object[])">
            <summary>
            Instatiates the specified type with specified constructor arguments
            </summary>
            <param name="type">The type to instantiate</param>
            <param name="constructorArguments">The constructor arguments</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.InstantiateGeneric``1(System.Type)">
            <summary>
            Instantiates the specified generic type
            </summary>
            <typeparam name="TClass">The type to instantiate</typeparam>
            <param name="typeArgument">The type of the generic type argument</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.InstantiateGeneric``1(System.Type[])">
            <summary>
            Instantiates the specified generic types
            </summary>
            <typeparam name="TClass">The type to instantiate</typeparam>
            <param name="typeArgument">The types of the generic type arguments</param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.InstantiateList(System.Type)">
            <summary>
            Instantiates a list of the specified generic type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:R2API.Utils.Reflection.GetTypesSafe(System.Reflection.Assembly,System.Type[]@)">
             <summary>
            
             </summary>
             <param name="assembly"></param>
             <param name="assemblyTypes"></param>
             <returns>false if a ReflectionTypeLoadException was caught</returns>
        </member>
        <member name="T:R2API.Utils.SystemInitializerInjector">
            <summary>
            A Utility class used for injecting dependencies to SystemInitializer attributes.
            </summary>
        </member>
        <member name="M:R2API.Utils.SystemInitializerInjector.InjectDependencies``1(System.Type[])">
            <summary>
            Injects the dependencies specified in <paramref name="dependenciesToInject"/> to the Type specified in <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to modify it's sytem initializer attribute.</typeparam>
            <param name="dependenciesToInject">The dependencies to inject</param>
        </member>
        <member name="M:R2API.Utils.SystemInitializerInjector.InjectDependency``1(System.Type)">
            <summary>
            Injects the dependency specified in <paramref name="dependencyToInject"/> to the Type specified in <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to modify it's sytem initializer attribute.</typeparam>
            <param name="dependencyToInject">The dependency to inject</param>
        </member>
        <member name="M:R2API.Utils.SystemInitializerInjector.InjectDependencies(System.Type,System.Type[])">
            <summary>
            Injects the dependencies specified in <paramref name="dependenciesToInject"/> to the Type specified in <paramref name="typeToInject"/>
            </summary>
            <param name="typeToInject">The type to modify it's sytem initializer attribute.</param>
            <param name="dependenciesToInject">The dependencies to inject</param>
        </member>
        <member name="M:R2API.Utils.SystemInitializerInjector.InjectDependency(System.Type,System.Type)">
            <summary>
            Injects the dependency specified in <paramref name="dependencyToInject"/> to the Type specified in <paramref name="typeToInject"/>
            </summary>
            <param name="typeToInject">The type to modify it's system initializer attribute</param>
            <param name="dependencyToInject">The dependency to inject</param>
        </member>
        <member name="M:R2API.Utils.SystemInitializerInjector.InjectDependency(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Injects <paramref name="dependency"/> as a dependency into the SystemInitializer method <paramref name="initializerMethod"/>
            </summary>
            <param name="initializerMethod">The initializer method to inject the dependency into</param>
            <param name="dependency">The dependency type to inject</param>
        </member>
        <member name="M:R2API.Utils.SystemInitializerInjector.InjectDependencies(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Injects <paramref name="dependencies"/> as dependencies into the SystemInitializer method <paramref name="initializerMethod"/>
            </summary>
            <param name="initializerMethod">The initializer method to inject the dependencies into</param>
            <param name="dependencies">The dependency types to inject</param>
        </member>
        <member name="M:R2API.MiscHelpers.KeyValuePairExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Extension to allow tuple style deconstruction of keys and values when enumerating a dictionary.
            Example: foreach(var (key, value) in myDictionary)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="kvp"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:R2API.R2API.LogDebug(System.Object,System.String)">
            <summary>
            Logs caller information along side debug message
            </summary>
            <param name="debugText"></param>
            <param name="caller"></param>
        </member>
        <member name="M:R2API.R2API.IsLoaded(System.String)">
            <summary>
            Return true if the specified submodule is loaded.
            </summary>
            <param name="submodule">nameof the submodule</param>
        </member>
        <member name="F:R2API.R2API.PluginVersion">
            <summary>
            Version of the plugin, should be matching with the thunderstore package.
            </summary>
        </member>
        <member name="T:R2API.AutoVersionGen.AutoVersionAttribute">
            <summary>
            Add a PluginVersion field to the attribut-ed class filled from the thunderstore.toml versionNumber field
            </summary>
        </member>
    </members>
</doc>
