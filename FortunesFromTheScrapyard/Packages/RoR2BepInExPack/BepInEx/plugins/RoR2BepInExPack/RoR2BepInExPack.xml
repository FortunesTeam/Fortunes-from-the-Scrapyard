<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RoR2BepInExPack</name>
    </assembly>
    <members>
        <member name="E:RoR2BepInExPack.VanillaFixes.SaferAchievementManager.OnRegisterAchievementAttributeFound">
            <summary>
            Called for each type that implement <see cref="T:RoR2.Achievements.BaseAchievement"/>,
            the code tries to find a <see cref="T:RoR2.RegisterAchievementAttribute"/> on the type definition
            and the event is invoked with the POTENTIALLY NULL <see cref="T:RoR2.RegisterAchievementAttribute"/>,
            the <see cref="T:System.Type"/> is also provided to the event for the subscriber to inspect.
            The use case for this event is mostly for mod creators to run their own logic for determining if the <see cref="T:RoR2.RegisterAchievementAttribute"/>
            should be ultimately used for creating an Achievement.
            </summary>
        </member>
        <member name="E:RoR2BepInExPack.VanillaFixes.SaferAchievementManager.OnCollectAchievementDefs">
            <summary>
            Called once all <see cref="T:RoR2.AchievementDef"/> have been created
            by the code that iterates over all types that implemented <see cref="T:RoR2.Achievements.BaseAchievement"/>
            and <see cref="T:RoR2.RegisterAchievementAttribute"/>.
            You can add or remove <see cref="T:RoR2.AchievementDef"/> with this event.
            The use case for this event is mostly for mod creators to run their own code
            for adding or removing <see cref="T:RoR2.AchievementDef"/> to the game.
            </summary>
        </member>
        <member name="T:RoR2BepInExPack.Utilities.FixedConditionalWeakTable`2">
            <summary>
            Alternative implementation for ConditionalWeakTable that actually works
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:RoR2BepInExPack.Utilities.FixedConditionalWeakTable`2.Add(`0,`1)">
            <summary>
            Add a value for the specified key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:RoR2BepInExPack.Utilities.FixedConditionalWeakTable`2.Remove(`0)">
            <summary>
            Removes a key and its value from the table.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RoR2BepInExPack.Utilities.FixedConditionalWeakTable`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value of the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RoR2BepInExPack.Utilities.FixedConditionalWeakTable`2.GetValue(`0,System.Func{`0,`1})">
            <summary>
            Gets the value of the specified key, or creates a new one with defaultFunc and adds it to the table
            </summary>
            <param name="key"></param>
            <param name="defaultFunc"></param>
            <returns></returns>
        </member>
        <member name="M:RoR2BepInExPack.Utilities.FixedConditionalWeakTable`2.GetOrCreateValue(`0)">
            <summary>
            Gets the value of the specified key, or creates a new one with default constructor and adds it to the table
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.MissingMethodException"></exception>
        </member>
    </members>
</doc>
