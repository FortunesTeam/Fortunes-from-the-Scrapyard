<?xml version="1.0"?>
<doc>
    <assembly>
        <name>R2API.Networking</name>
    </assembly>
    <members>
        <member name="T:R2API.Networking.Interfaces.INetCommand">
            <summary>
            Interface for network messages which will execute <see cref="M:R2API.Networking.Interfaces.INetCommand.OnReceived"/> when received by the targeted machine(s).
            </summary>
        </member>
        <member name="M:R2API.Networking.Interfaces.INetCommand.OnReceived">
            <summary>
            Executed when received by the targeted machine(s).
            </summary>
        </member>
        <member name="M:R2API.Networking.Interfaces.NetCommandExtensions.Send(R2API.Networking.Interfaces.INetCommand,R2API.Networking.NetworkDestination)">
            <summary>
            Send the passed command over the network
            </summary>
            <param name="command">Registered command</param>
            <param name="destination">Destination of the command</param>
        </member>
        <member name="M:R2API.Networking.Interfaces.NetCommandExtensions.Send(R2API.Networking.Interfaces.INetCommand,UnityEngine.Networking.NetworkConnection)">
            <summary>
            <inheritdoc cref="M:R2API.Networking.Interfaces.NetCommandExtensions.Send(R2API.Networking.Interfaces.INetCommand,R2API.Networking.NetworkDestination)"/>
            to a specific NetworkConnection, only callable from server.
            You can retrieve a <see cref="T:UnityEngine.Networking.NetworkConnection"/> from <see cref="P:UnityEngine.Networking.NetworkServer.connections"/> or
            from a <see cref="P:UnityEngine.Networking.NetworkBehaviour.connectionToClient"/> field.
            </summary>
            <param name="command">Registered command</param>
            <param name="target">NetworkConnection the command will be sent to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when target is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if not called from server</exception>
        </member>
        <member name="T:R2API.Networking.Interfaces.INetMessage">
            <summary>
            <inheritdoc cref="T:R2API.Networking.Interfaces.INetCommand"/>
            <inheritdoc cref="T:R2API.Networking.Interfaces.ISerializableObject"/>
            </summary>
        </member>
        <member name="M:R2API.Networking.Interfaces.INetMessage.OnReceived">
            <inheritdoc cref="M:R2API.Networking.Interfaces.INetCommand.OnReceived"/>
        </member>
        <member name="M:R2API.Networking.Interfaces.NetMessageExtensions.Send(R2API.Networking.Interfaces.INetMessage,R2API.Networking.NetworkDestination)">
            <summary>
            Send the passed message over the network
            </summary>
            <param name="message">Registered message</param>
            <param name="destination">Destination of the message</param>
        </member>
        <member name="M:R2API.Networking.Interfaces.NetMessageExtensions.Send(R2API.Networking.Interfaces.INetMessage,UnityEngine.Networking.NetworkConnection)">
            <summary>
            <inheritdoc cref="M:R2API.Networking.Interfaces.NetMessageExtensions.Send(R2API.Networking.Interfaces.INetMessage,R2API.Networking.NetworkDestination)"/>
            to a specific NetworkConnection, only callable from server.
            You can retrieve a <see cref="T:UnityEngine.Networking.NetworkConnection"/> from <see cref="P:UnityEngine.Networking.NetworkServer.connections"/> or
            from a <see cref="P:UnityEngine.Networking.NetworkBehaviour.connectionToClient"/> field.
            </summary>
            <param name="message">Registered message</param>
            <param name="target">NetworkConnection the message will be sent to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when target is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if not called from server</exception>
        </member>
        <member name="T:R2API.Networking.Interfaces.INetRequest`2">
            <summary>
            Interface for network requests which will execute <see cref="M:R2API.Networking.Interfaces.INetRequest`2.OnRequestReceived"/> when received by the targeted machine(s).
            Must be used in conjunction with <see cref="T:R2API.Networking.Interfaces.INetRequestReply`2"/>"/>.
            Check <seealso cref="T:R2API.Networking.Messages.ExamplePing"/> for an example implementation.
            <inheritdoc cref="T:R2API.Networking.Interfaces.ISerializableObject"/>
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TReply"></typeparam>
        </member>
        <member name="M:R2API.Networking.Interfaces.INetRequest`2.OnRequestReceived">
            <summary>
            Executed when received by the targeted machine(s).
            </summary>
            <returns></returns>
        </member>
        <member name="T:R2API.Networking.Interfaces.INetRequestReply`2">
            <summary>
            Interface for network replies which will execute <see cref="M:R2API.Networking.Interfaces.INetRequestReply`2.OnReplyReceived"/>
            after the original target received and executed <see cref="M:R2API.Networking.Interfaces.INetRequest`2.OnRequestReceived"/>.
            Must be used in conjunction with <see cref="T:R2API.Networking.Interfaces.INetRequest`2"/>"/>.
            Check <seealso cref="T:R2API.Networking.Messages.ExamplePingReply"/> for an example implementation.
            <inheritdoc cref="T:R2API.Networking.Interfaces.ISerializableObject"/>
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TReply"></typeparam>
        </member>
        <member name="M:R2API.Networking.Interfaces.INetRequestReply`2.OnReplyReceived">
            <summary>
            Executed by the original sender of the <see cref="T:R2API.Networking.Interfaces.INetRequest`2"/>.
            </summary>
        </member>
        <member name="M:R2API.Networking.Interfaces.NetRequestExtensions.Send``2(``0,R2API.Networking.NetworkDestination)">
            <summary>
            Send the passed request over the network
            </summary>
            <param name="request">Registered request</param>
            <param name="destination">Destination of the request</param>
        </member>
        <member name="M:R2API.Networking.Interfaces.NetRequestExtensions.Send``2(``0,UnityEngine.Networking.NetworkConnection)">
            <summary>
            <inheritdoc cref="M:R2API.Networking.Interfaces.NetRequestExtensions.Send``2(``0,R2API.Networking.NetworkDestination)"/>
            to a specific NetworkConnection, only callable from server.
            You can retrieve a <see cref="T:UnityEngine.Networking.NetworkConnection"/> from <see cref="P:UnityEngine.Networking.NetworkServer.connections"/> or
            from a <see cref="P:UnityEngine.Networking.NetworkBehaviour.connectionToClient"/> field.
            </summary>
            <param name="request">Registered request</param>
            <param name="target">NetworkConnection the request will be sent to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when target is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if not called from server</exception>
        </member>
        <member name="T:R2API.Networking.Interfaces.ISerializableObject">
            <summary>
            Must implement Serialize for how to serialize the class / struct through a NetworkWriter
            and how to deserialize them through a NetworkReader
            </summary>
        </member>
        <member name="M:R2API.Networking.Interfaces.ISerializableObject.Serialize(UnityEngine.Networking.NetworkWriter)">
            <summary>
            How the class / struct should be serialized over the network
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:R2API.Networking.Interfaces.ISerializableObject.Deserialize(UnityEngine.Networking.NetworkReader)">
            <summary>
            How the class / struct should be deserialized over the network
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:R2API.Networking.NetworkingAPI">
            <summary>
            Allow easy sending of custom networked messages, check
            <see href="https://github.com/risk-of-thunder/R2Wiki/wiki/Networking-with-R2API.NetworkingAPI-(INetMessage)">
            the tutorial for example usage.</see>
            </summary>
        </member>
        <member name="P:R2API.Networking.NetworkingAPI.Loaded">
            <summary>
            Return true if the submodule is loaded.
            </summary>
        </member>
        <member name="M:R2API.Networking.NetworkingAPI.RegisterMessageType``1">
            <summary>
            <inheritdoc cref="T:R2API.Networking.NetworkingAPI"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:R2API.Networking.NetworkingAPI.RegisterCommandType``1">
            <summary>
            <inheritdoc cref="T:R2API.Networking.NetworkingAPI"/>
            </summary>
            <typeparam name="TCommand"></typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:R2API.Networking.NetworkingAPI.RegisterRequestTypes``2">
            <summary>
            Check <see cref="T:R2API.Networking.Messages.ExamplePing"/> and <see cref="T:R2API.Networking.Messages.ExamplePingReply"/> for example.
            <inheritdoc cref="T:R2API.Networking.NetworkingAPI"/>
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TReply"></typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:R2API.Networking.NetworkingAPI.RegisterRequestTypesInternal``2">
            <summary>
            Check <see cref="T:R2API.Networking.Messages.ExamplePing"/> and <see cref="T:R2API.Networking.Messages.ExamplePingReply"/> for example.
            <inheritdoc cref="T:R2API.Networking.NetworkingAPI"/>
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TReply"></typeparam>
            <returns></returns>
        </member>
        <member name="M:R2API.Networking.NetworkingAPI.GetNetworkHash(System.Type)">
            <summary>
            <para>Used for generating and retrieving hash when registering messages.</para>
            <para>Also used when looking up the TypeCode when sending / retrieving the Header</para>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:R2API.Networking.NetworkingAPI.PluginVersion">
            <summary>
            Version of the plugin, should be matching with the thunderstore package.
            </summary>
        </member>
        <member name="T:R2API.Networking.NetworkingHelpers">
            <summary>
            Helper functions for various RoR2 networking needs
            </summary>
        </member>
        <member name="T:R2API.AutoVersionGen.AutoVersionAttribute">
            <summary>
            Add a PluginVersion field to the attribut-ed class filled from the thunderstore.toml versionNumber field
            </summary>
        </member>
    </members>
</doc>
