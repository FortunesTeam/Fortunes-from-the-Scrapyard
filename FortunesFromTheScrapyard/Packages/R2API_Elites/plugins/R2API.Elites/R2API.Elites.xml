<?xml version="1.0"?>
<doc>
    <assembly>
        <name>R2API.Elites</name>
    </assembly>
    <members>
        <member name="T:R2API.CustomElite">
            <summary>
            Class that defines a custom Elite type for use in the game
            All Elites consist of an <see cref="T:RoR2.EliteDef"/>, an <see cref="T:RoR2.EquipmentDef"/>
            and a <see cref="T:RoR2.BuffDef"/>.
            An Elite can only spawn if its in one of the available <see cref="F:RoR2.CombatDirector.eliteTiers"/> (vanilla or custom).
            Please check the constructors docs for more information.
            </summary>
        </member>
        <member name="F:R2API.CustomElite.EliteDef">
            <summary>
            Elite definition
            </summary>
        </member>
        <member name="F:R2API.CustomElite.EliteRamp">
            <summary>
            The TextureRamp for this elite, can be omitted
            </summary>
        </member>
        <member name="F:R2API.CustomElite.EliteTierDefs">
            <summary>
            Elite tier(s) that the eliteDef will be on.
            </summary>
        </member>
        <member name="M:R2API.CustomElite.#ctor(System.String,RoR2.EquipmentDef,UnityEngine.Color32,System.String,System.Collections.Generic.IEnumerable{RoR2.CombatDirector.EliteTierDef})">
            <summary>
            You can omit giving a value to <see cref="P:RoR2.EliteDef.eliteIndex"/>, as it'll be filled in automatically by the game.
            For your custom elite to spawn, you need to provide an enumerable of <see cref="T:RoR2.CombatDirector.EliteTierDef"/> as second parameter.
            The API will then add your <see cref="F:R2API.CustomElite.EliteDef"/> in them.
            You can also make a totally new tier, by either
            directly modifying the array through <see cref="M:R2API.EliteAPI.GetCombatDirectorEliteTiers"/> and <see cref="M:R2API.EliteAPI.OverrideCombatDirectorEliteTiers(RoR2.CombatDirector.EliteTierDef[])"/>
            or by using <see cref="M:R2API.EliteAPI.AddCustomEliteTier(RoR2.CombatDirector.EliteTierDef)"/>
            </summary>
        </member>
        <member name="M:R2API.CustomElite.#ctor(System.String,RoR2.EquipmentDef,UnityEngine.Color32,System.String,System.Collections.Generic.IEnumerable{RoR2.CombatDirector.EliteTierDef},UnityEngine.Texture2D)">
            <inheritdoc cref="M:R2API.CustomElite.#ctor(System.String,RoR2.EquipmentDef,UnityEngine.Color32,System.String,System.Collections.Generic.IEnumerable{RoR2.CombatDirector.EliteTierDef})"/>
        </member>
        <member name="M:R2API.CustomElite.#ctor(RoR2.EliteDef,System.Collections.Generic.IEnumerable{RoR2.CombatDirector.EliteTierDef})">
            <inheritdoc cref="M:R2API.CustomElite.#ctor(System.String,RoR2.EquipmentDef,UnityEngine.Color32,System.String,System.Collections.Generic.IEnumerable{RoR2.CombatDirector.EliteTierDef})"/>
        </member>
        <member name="M:R2API.CustomElite.#ctor(RoR2.EliteDef,System.Collections.Generic.IEnumerable{RoR2.CombatDirector.EliteTierDef},UnityEngine.Texture2D)">
            <inheritdoc cref="M:R2API.CustomElite.#ctor(System.String,RoR2.EquipmentDef,UnityEngine.Color32,System.String,System.Collections.Generic.IEnumerable{RoR2.CombatDirector.EliteTierDef})"/>
        </member>
        <member name="P:R2API.EliteAPI.Loaded">
            <summary>
            Return true if the submodule is loaded.
            </summary>
        </member>
        <member name="M:R2API.EliteAPI.#cctor">
            <summary>
            See <see cref="M:R2API.EliteAPI.CombatDirectorInitNoTimingIssue"/>
            </summary>
        </member>
        <member name="M:R2API.EliteAPI.CombatDirectorInitNoTimingIssue">
            <summary>
            Only hope at this point is HG using extensible code and not hard coding.
            Before we were loading all hard refs earlier, but we removed that in favor of a bit better loading screen.
            Bandaid fix for now for the api to work again : replace the RoR2Content hard refs with Addressables Load Asset.
            Todo : investigate if adding an event like the other catalogs have + putting code inside a GenerateContentPackAsync
            would be a cleaner fix or not.
            Note: Will be breaking as opposed to current solution below which doesnt change anything on how the old mods were operating.
            </summary>
        </member>
        <member name="M:R2API.EliteAPI.Add(R2API.CustomElite)">
            <summary>
            Add a custom elite to the elite catalog.
            If this is called after the <see cref="T:RoR2.EliteCatalog"/> inits then this will throw.
            <see cref="F:R2API.CustomElite.EliteTierDefs"/> shouldnt be empty if you want to see your custom elite appear in the game.
            You can also directly modify <see cref="F:RoR2.CombatDirector.eliteTiers"/>.
            Please check the constructors docs of <see cref="T:R2API.CustomElite"/> for more information.
            </summary>
            <param name="elite">The elite to add.</param>
            <returns>true if added, false otherwise</returns>
        </member>
        <member name="M:R2API.EliteAPI.GetCombatDirectorEliteTiers">
            <summary>
            Returns the current elite tier definitions used by the Combat Director for doing its elite spawning while doing a run.
            </summary>
        </member>
        <member name="M:R2API.EliteAPI.OverrideCombatDirectorEliteTiers(RoR2.CombatDirector.EliteTierDef[])">
            <summary>
            The EliteTierDef array is used by the Combat Director for doing its elite spawning while doing a run.
            You can get the current array used by the director with <see cref="M:R2API.EliteAPI.GetCombatDirectorEliteTiers"/>
            </summary>
            <param name="newEliteTiers">The new elite tiers that will be used by the combat director.</param>
        </member>
        <member name="M:R2API.EliteAPI.AppendCustomEliteTier(RoR2.CombatDirector.EliteTierDef)">
            <summary>
            Allows for adding a new elite tier def to the combat director.
            When adding a new elite tier,
            do not fill the eliteTypes field with your custom elites defs if your goal is to add your custom elite in it right after.
            Because when doing EliteAPI.Add, the API will add your elite to the specified tiers <see cref="F:R2API.CustomElite.EliteTierDefs"/>.
            </summary>
            <param name="eliteTierDef">The new elite tier to add.</param>
        </member>
        <member name="M:R2API.EliteAPI.AddCustomEliteTier(RoR2.CombatDirector.EliteTierDef)">
            <summary>
            Allows for adding a new elite tier def to the combat director.
            Automatically insert the eliteTierDef at the correct position in the array based on its <see cref="F:RoR2.CombatDirector.EliteTierDef.costMultiplier"/>
            When adding a new elite tier, do not fill the eliteTypes field with your custom elites defs if your goal is to add your custom elite in it right after.
            Because when doing EliteAPI.Add, the API will add your elite to the specified tiers <see cref="F:R2API.CustomElite.EliteTierDefs"/>.
            </summary>
            <param name="eliteTierDef">The new elite tier to add.</param>
        </member>
        <member name="M:R2API.EliteAPI.AddCustomEliteTier(RoR2.CombatDirector.EliteTierDef,System.Int32)">
            <summary>
            Allows for adding a new <see cref="T:RoR2.CombatDirector.EliteTierDef"/>
            Do NOT fill the <see cref="F:RoR2.CombatDirector.EliteTierDef.eliteTypes"/> field with your custom elites defs if your goal is to add your custom elite in it right after.
            Because when doing <see cref="M:R2API.EliteAPI.Add(R2API.CustomElite)"/>, it'll add your elite to the specified <see cref="F:R2API.CustomElite.EliteTierDefs"/>.
            </summary>
            <param name="eliteTierDef">The new elite tier to add.</param>
            <param name="indexToInsertAt">Optional index to specify if you want to insert a cheaper elite tier</param>
        </member>
        <member name="F:R2API.EliteAPI.PluginVersion">
            <summary>
            Version of the plugin, should be matching with the thunderstore package.
            </summary>
        </member>
        <member name="T:R2API.AutoVersionGen.AutoVersionAttribute">
            <summary>
            Add a PluginVersion field to the attribut-ed class filled from the thunderstore.toml versionNumber field
            </summary>
        </member>
    </members>
</doc>
